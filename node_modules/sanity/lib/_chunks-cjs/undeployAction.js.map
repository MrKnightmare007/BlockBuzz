{"version":3,"file":"undeployAction.js","sources":["../../src/_internal/cli/actions/app/undeployAction.ts"],"sourcesContent":["import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\n\nimport {debug as debugIt} from '../../debug'\nimport {deleteUserApplication, getUserApplication} from '../deploy/helpers'\n\nconst debug = debugIt.extend('undeploy')\n\nexport default async function undeployCoreAppAction(\n  _: CliCommandArguments<Record<string, unknown>>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, chalk, output, prompt, cliConfig} = context\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: false,\n  }).withConfig({apiVersion: 'v2024-08-01'})\n\n  // Check that the project has a Core application ID\n  let spinner = output.spinner('Checking application info').start()\n\n  const userApplication = await getUserApplication({\n    client,\n    appId:\n      cliConfig && '__experimental_coreAppConfiguration' in cliConfig\n        ? cliConfig.__experimental_coreAppConfiguration?.appId\n        : undefined,\n  })\n\n  spinner.succeed()\n\n  if (!userApplication) {\n    output.print('Your project has not been assigned a Core application ID')\n    output.print(\n      'or you do not have __experimental_coreAppConfiguration set in sanity.cli.js or sanity.cli.ts.',\n    )\n    output.print('Nothing to undeploy.')\n    return\n  }\n\n  // Double-check\n  output.print('')\n\n  const url = `https://${chalk.yellow(userApplication.appHost)}.sanity.studio`\n  const shouldUndeploy = await prompt.single({\n    type: 'confirm',\n    default: false,\n    message: `This will undeploy ${url} and make it unavailable for your users.\n  The hostname will be available for anyone to claim.\n  Are you ${chalk.red('sure')} you want to undeploy?`.trim(),\n  })\n\n  if (!shouldUndeploy) {\n    return\n  }\n\n  spinner = output.spinner('Undeploying application').start()\n  try {\n    await deleteUserApplication({\n      client,\n      applicationId: userApplication.id,\n      appType: 'coreApp',\n    })\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    debug('Error undeploying application', err)\n    throw err\n  }\n\n  output.print(\n    `Application undeploy scheduled. It might take a few minutes before ${url} is unavailable.`,\n  )\n}\n"],"names":["debug","debugIt","extend","undeployCoreAppAction","_","context","apiClient","chalk","output","prompt","cliConfig","client","requireUser","requireProject","withConfig","apiVersion","spinner","start","userApplication","getUserApplication","appId","__experimental_coreAppConfiguration","undefined","succeed","print","url","yellow","appHost","single","type","default","message","red","trim","deleteUserApplication","applicationId","id","appType","err","fail"],"mappings":";;AAKA,MAAMA,QAAQC,UAAAA,MAAQC,OAAO,UAAU;AAETC,eAAAA,sBAC5BC,GACAC,SACe;AACT,QAAA;AAAA,IAACC;AAAAA,IAAWC;AAAAA,IAAOC;AAAAA,IAAQC;AAAAA,IAAQC;AAAAA,EAAAA,IAAaL,SAEhDM,SAASL,UAAU;AAAA,IACvBM,aAAa;AAAA,IACbC,gBAAgB;AAAA,EACjB,CAAA,EAAEC,WAAW;AAAA,IAACC,YAAY;AAAA,EAAA,CAAc;AAGzC,MAAIC,UAAUR,OAAOQ,QAAQ,2BAA2B,EAAEC,MAAM;AAE1DC,QAAAA,kBAAkB,MAAMC,2BAAmB;AAAA,IAC/CR;AAAAA,IACAS,OACEV,aAAa,yCAAyCA,YAClDA,UAAUW,qCAAqCD,QAC/CE;AAAAA,EAAAA,CACP;AAID,MAFAN,QAAQO,WAEJ,CAACL,iBAAiB;AACbM,WAAAA,MAAM,0DAA0D,GACvEhB,OAAOgB,MACL,+FACF,GACAhB,OAAOgB,MAAM,sBAAsB;AACnC;AAAA,EAAA;AAIFhB,SAAOgB,MAAM,EAAE;AAEf,QAAMC,MAAM,WAAWlB,MAAMmB,OAAOR,gBAAgBS,OAAO,CAAC;AACrC,MAAA,MAAMlB,OAAOmB,OAAO;AAAA,IACzCC,MAAM;AAAA,IACNC,SAAS;AAAA,IACTC,SAAS,sBAAsBN,GAAG;AAAA;AAAA,YAE1BlB,MAAMyB,IAAI,MAAM,CAAC,yBAAyBC,KAAK;AAAA,EAAA,CACxD,GAMDjB;AAAAA,cAAUR,OAAOQ,QAAQ,yBAAyB,EAAEC,MAAM;AACtD,QAAA;AACF,YAAMiB,8BAAsB;AAAA,QAC1BvB;AAAAA,QACAwB,eAAejB,gBAAgBkB;AAAAA,QAC/BC,SAAS;AAAA,MAAA,CACV,GACDrB,QAAQO,QAAQ;AAAA,aACTe,KAAK;AACZtB,YAAAA,QAAQuB,KAAK,GACbvC,MAAM,iCAAiCsC,GAAG,GACpCA;AAAAA,IAAAA;AAGDd,WAAAA,MACL,sEAAsEC,GAAG,kBAC3E;AAAA,EAAA;AACF;;"}