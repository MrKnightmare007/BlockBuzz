{"version":3,"file":"_internal.js","sources":["../../src/_internal/cli/commands/app/appGroup.ts","../../src/_internal/cli/commands/app/buildCommand.ts","../../src/_internal/cli/commands/app/deployCommand.ts","../../src/_internal/cli/commands/app/devCommand.ts","../../src/_internal/cli/util/isInteractive.ts","../../src/_internal/cli/commands/dev/devCommand.ts","../../src/_internal/cli/commands/app/startCommand.ts","../../src/_internal/cli/commands/app/undeployCommand.ts","../../src/_internal/cli/commands/backup/backupGroup.ts","../../src/_internal/cli/actions/backup/parseApiErr.ts","../../src/_internal/cli/debug.ts","../../src/_internal/cli/actions/dataset/validateDatasetName.ts","../../src/_internal/cli/actions/dataset/datasetNamePrompt.ts","../../src/_internal/cli/actions/dataset/chooseDatasetPrompt.ts","../../src/_internal/cli/actions/backup/resolveApiClient.ts","../../src/_internal/cli/commands/backup/disableBackupCommand.ts","../../src/_internal/cli/actions/backup/debug.ts","../../src/_internal/cli/actions/backup/archiveDir.ts","../../src/_internal/cli/actions/backup/chooseBackupIdPrompt.ts","../../src/_internal/cli/actions/backup/cleanupTmpDir.ts","../../src/_internal/cli/actions/backup/withRetry.ts","../../src/_internal/cli/actions/backup/downloadAsset.ts","../../src/_internal/cli/actions/backup/downloadDocument.ts","../../src/_internal/cli/actions/backup/fetchNextBackupPage.ts","../../src/_internal/cli/actions/backup/progressSpinner.ts","../../src/_internal/cli/util/humanFileSize.ts","../../src/_internal/cli/util/isPathDirName.ts","../../src/_internal/cli/commands/backup/downloadBackupCommand.ts","../../src/_internal/cli/commands/backup/enableBackupCommand.ts","../../src/_internal/cli/commands/backup/listBackupCommand.ts","../../src/_internal/cli/commands/build/buildCommand.ts","../../src/_internal/cli/actions/cors/addCorsOrigin.ts","../../src/_internal/cli/commands/cors/addCorsOriginCommand.ts","../../src/_internal/cli/commands/cors/corsGroup.ts","../../src/_internal/cli/commands/cors/deleteCorsOriginCommand.ts","../../src/_internal/cli/commands/cors/listCorsOriginsCommand.ts","../../src/_internal/cli/actions/dataset/alias/validateDatasetAliasName.ts","../../src/_internal/cli/actions/dataset/alias/promptForDatasetAliasName.ts","../../src/_internal/cli/commands/dataset/alias/datasetAliasesClient.ts","../../src/_internal/cli/commands/dataset/alias/createAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/deleteAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/linkAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/unlinkAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/aliasCommands.ts","../../src/_internal/cli/actions/dataset/listDatasetCopyJobs.ts","../../src/_internal/cli/util/getClientUrl.ts","../../src/_internal/cli/commands/dataset/copyDatasetCommand.ts","../../src/_internal/cli/commands/dataset/createDatasetCommand.ts","../../src/_internal/cli/commands/dataset/datasetGroup.ts","../../src/_internal/cli/commands/dataset/datasetVisibilityCommand.ts","../../src/_internal/cli/commands/dataset/deleteDatasetCommand.ts","../../src/_internal/cli/commands/dataset/exportDatasetCommand.ts","../../src/_internal/cli/commands/dataset/importDatasetCommand.ts","../../src/_internal/cli/commands/dataset/alias/listAliasesHandler.ts","../../src/_internal/cli/commands/dataset/listDatasetsCommand.ts","../../src/_internal/cli/commands/deploy/deployCommand.ts","../../src/_internal/cli/commands/deploy/undeployCommand.ts","../../src/_internal/cli/commands/documents/createDocumentsCommand.ts","../../src/_internal/cli/commands/documents/deleteDocumentsCommand.ts","../../src/_internal/cli/commands/documents/documentsGroup.ts","../../src/_internal/cli/util/colorizeJson.ts","../../src/_internal/cli/commands/documents/getDocumentsCommand.ts","../../src/_internal/cli/commands/documents/queryDocumentsCommand.ts","../../src/_internal/cli/commands/documents/validateDocumentsCommand.ts","../../src/_internal/cli/commands/exec/execCommand.ts","../../src/_internal/cli/commands/graphql/deleteGraphQLAPICommand.ts","../../src/_internal/cli/commands/graphql/deployGraphQLAPICommand.ts","../../src/_internal/cli/commands/graphql/graphqlGroup.ts","../../src/_internal/cli/commands/graphql/listGraphQLAPIsCommand.ts","../../src/_internal/cli/commands/hook/createHookCommand.ts","../../src/_internal/cli/commands/hook/deleteHookCommand.ts","../../src/_internal/cli/commands/hook/hookGroup.ts","../../src/_internal/cli/commands/hook/printHookAttemptCommand.ts","../../src/_internal/cli/commands/hook/listHookLogsCommand.ts","../../src/_internal/cli/commands/hook/listHooksCommand.ts","../../src/_internal/cli/commands/manifest/extractManifestCommand.ts","../../src/_internal/cli/commands/manifest/manifestGroup.ts","../../src/_internal/cli/commands/migration/constants.ts","../../src/_internal/cli/commands/migration/templates/minimalAdvanced.ts","../../src/_internal/cli/commands/migration/templates/minimalSimple.ts","../../src/_internal/cli/commands/migration/templates/renameField.ts","../../src/_internal/cli/commands/migration/templates/renameType.ts","../../src/_internal/cli/commands/migration/templates/stringToPTE.ts","../../src/_internal/cli/commands/migration/createMigrationCommand.ts","../../src/_internal/cli/commands/migration/utils/resolveMigrationScript.ts","../../src/_internal/cli/commands/migration/listMigrationsCommand.ts","../../src/_internal/cli/commands/migration/migrationGroup.ts","../../src/_internal/cli/util/tree.ts","../../src/_internal/cli/commands/migration/prettyMutationFormatter.ts","../../src/_internal/cli/commands/migration/utils/ensureApiVersionFormat.ts","../../src/_internal/cli/commands/migration/runMigrationCommand.ts","../../src/_internal/cli/commands/preview/previewCommand.ts","../../src/_internal/cli/commands/schema/extractSchemaCommand.ts","../../src/_internal/cli/commands/schema/schemaGroup.ts","../../src/_internal/cli/commands/schema/validateSchemaCommand.ts","../../src/_internal/cli/commands/start/startCommand.ts","../../src/_internal/cli/util/prettifyQuotaError.ts","../../src/_internal/cli/commands/users/inviteUserCommand.ts","../../src/_internal/cli/commands/users/listUsersCommand.ts","../../src/_internal/cli/commands/users/usersGroup.ts","../../src/_internal/cli/commands/index.ts"],"sourcesContent":["import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst appGroup: CliCommandGroupDefinition = {\n  name: 'app',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages non-studio applications',\n}\n\nexport default appGroup\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type BuildSanityStudioCommandFlags} from '../../actions/build/buildAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  -y, --yes Unattended mode, answers \"yes\" to any \"yes/no\" prompt and otherwise uses defaults\n\nExamples\n  sanity app build\n  sanity app build --no-minify --source-maps\n`\n\nconst appBuildCommand: CliCommandDefinition = {\n  name: 'build',\n  group: 'app',\n  signature: '[OUTPUT_DIR]',\n  description: 'Builds the Sanity application configuration into a static bundle',\n  action: async (\n    args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n    context: CliCommandContext,\n    overrides?: {basePath?: string},\n  ) => {\n    const buildAction = await getBuildAction()\n\n    return buildAction(args, context, overrides)\n  },\n  helpText,\n}\n\nasync function getBuildAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/build/buildAction') = require('../../actions/build/buildAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/build/buildAction')\n\n  return mod.default\n}\n\nexport default appBuildCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type DeployStudioActionFlags} from '../../actions/deploy/deployAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  --no-build Don't build the application prior to deploy, instead deploying the version currently in \\`dist/\\`\n  -y, --yes Unattended mode, answers \"yes\" to any \"yes/no\" prompt and otherwise uses defaults\n\nExamples\n  sanity deploy\n  sanity deploy --no-minify --source-maps\n`\n\nconst appDeployCommand: CliCommandDefinition = {\n  name: 'deploy',\n  group: 'app',\n  signature: '[SOURCE_DIR] [--no-build] [--source-maps] [--no-minify]',\n  description: 'Builds and deploys Sanity application to Sanity hosting',\n  action: async (\n    args: CliCommandArguments<DeployStudioActionFlags>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/deploy/deployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default appDeployCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartDevServerCommandFlags} from '../../actions/dev/devAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3334]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity app dev --host=0.0.0.0\n  sanity app dev --port=1942\n`\n\nconst appDevCommand: CliCommandDefinition = {\n  name: 'dev',\n  group: 'app',\n  signature: '[--port <port>] [--host <host>]',\n  description: 'Starts a local dev server for your Sanity application with live reloading',\n  action: async (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const devAction = await getDevAction()\n\n    return devAction(args, context)\n  },\n  helpText,\n}\n\nexport async function getDevAction(): Promise<\n  (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext,\n  ) => Promise<void>\n> {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/app/devAction') = require('../../actions/app/devAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/app/devAction')\n\n  return mod.default\n}\n\nexport default appDevCommand\n","/* eslint-disable no-process-env */\nexport const isInteractive =\n  process.stdout.isTTY && process.env.TERM !== 'dumb' && !('CI' in process.env)\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartDevServerCommandFlags} from '../../actions/dev/devAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity dev --host=0.0.0.0\n  sanity dev --port=1942\n`\n\nconst devCommand: CliCommandDefinition = {\n  name: 'dev',\n  signature: '[--port <port>] [--host <host>]',\n  description: 'Starts a local dev server for Sanity Studio with live reloading',\n  action: async (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const devAction = await getDevAction()\n\n    return devAction(args, context)\n  },\n  helpText,\n}\n\nexport async function getDevAction(): Promise<\n  (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext,\n  ) => Promise<void>\n> {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/dev/devAction') = require('../../actions/dev/devAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/dev/devAction')\n\n  return mod.default\n}\n\nexport default devCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\nimport {isInteractive} from '../../util/isInteractive'\nimport {getDevAction} from '../dev/devCommand'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new CORS-entry to be added.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity app start --host=0.0.0.0\n  sanity app start --port=1942\n  sanity app start some/build-output-dir\n`\n\nconst appStartCommand: CliCommandDefinition = {\n  name: 'start',\n  group: 'app',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Previews a built Sanity application',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const {output, chalk, prompt} = context\n    const previewAction = await getPreviewAction()\n\n    const error = (msg: string) => output.warn(chalk.red.bgBlack(msg))\n\n    try {\n      await previewAction(args, context)\n    } catch (err) {\n      if (err.name !== 'BUILD_NOT_FOUND') {\n        throw err\n      }\n\n      error(err.message)\n      error('\\n')\n\n      const shouldRunDevServer =\n        isInteractive &&\n        (await prompt.single({\n          message: 'Do you want to start a development server instead?',\n          type: 'confirm',\n        }))\n\n      if (shouldRunDevServer) {\n        const devAction = await getDevAction()\n        await devAction(args, context)\n      } else {\n        // Indicate that this isn't an expected exit\n        // eslint-disable-next-line no-process-exit\n        process.exit(1)\n      }\n    }\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default appStartCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity app undeploy\n`\n\nconst appUndeployCommand: CliCommandDefinition = {\n  name: 'undeploy',\n  group: 'app',\n  signature: '',\n  description: 'Removes the deployed Core application from Sanity hosting',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/app/undeployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default appUndeployCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\n// defaultApiVersion is the backend API version used for dataset backup.\nexport const defaultApiVersion = 'v2024-02-21'\n\nconst datasetBackupGroup: CliCommandGroupDefinition = {\n  name: 'backup',\n  signature: '[COMMAND]',\n  description: 'Manage backups.',\n  isGroupRoot: true,\n}\n\nexport default datasetBackupGroup\n","// apiErr is a type that represents an error returned by the API\ninterface ApiErr {\n  statusCode: number\n  message: string\n}\n\n// parseApiErr is a function that attempts with the best effort to parse\n// an error returned by the API since different API endpoint may end up\n// returning different error structures.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\nfunction parseApiErr(err: any): ApiErr {\n  const apiErr = {} as ApiErr\n  if (err.code) {\n    apiErr.statusCode = err.code\n  } else if (err.statusCode) {\n    apiErr.statusCode = err.statusCode\n  }\n\n  if (err.message) {\n    apiErr.message = err.message\n  } else if (err.statusMessage) {\n    apiErr.message = err.statusMessage\n  } else if (err?.response?.body?.message) {\n    apiErr.message = err.response.body.message\n  } else if (err?.response?.data?.message) {\n    apiErr.message = err.response.data.message\n  } else {\n    // If no message can be extracted, print the whole error.\n    apiErr.message = JSON.stringify(err)\n  }\n\n  return apiErr\n}\n\nexport default parseApiErr\n","import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:core')\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Dataset name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Dataset name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Dataset name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Dataset name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9]/.test(name)) {\n    return 'Dataset name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9][-_a-z0-9]+$/.test(name)) {\n    return 'Dataset name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Dataset name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import {type CliPrompter} from '@sanity/cli'\n\nimport {validateDatasetName} from './validateDatasetName'\n\nexport function promptForDatasetName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {},\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Dataset name:',\n    validate: (name) => {\n      const err = validateDatasetName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import {type CliCommandContext} from '@sanity/cli'\n\nimport {debug} from '../../debug'\nimport {promptForDatasetName} from './datasetNamePrompt'\n\nexport async function chooseDatasetPrompt(\n  context: CliCommandContext,\n  options: {message?: string; allowCreation?: boolean} = {},\n): Promise<string> {\n  const {apiClient, prompt} = context\n  const {message, allowCreation} = options\n  const client = apiClient()\n\n  const datasets = await client.datasets.list()\n  const hasProduction = datasets.find((dataset) => dataset.name === 'production')\n  const datasetChoices = datasets.map((dataset) => ({value: dataset.name}))\n  const selected = await prompt.single({\n    message: message || 'Select dataset to use',\n    type: 'list',\n    choices: allowCreation\n      ? [{value: 'new', name: 'Create new dataset'}, new prompt.Separator(), ...datasetChoices]\n      : datasetChoices,\n  })\n\n  if (selected === 'new') {\n    debug('User wants to create a new dataset, prompting for name')\n    const newDatasetName = await promptForDatasetName(prompt, {\n      message: 'Name your dataset:',\n      default: hasProduction ? undefined : 'production',\n    })\n    await client.datasets.create(newDatasetName)\n    return newDatasetName\n  }\n\n  return selected\n}\n","import {type CliCommandContext} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\n\nimport {chooseDatasetPrompt} from '../dataset/chooseDatasetPrompt'\n\ntype ResolvedApiClient = {\n  projectId: string\n  datasetName: string\n  token?: string\n  client: SanityClient\n}\n\nasync function resolveApiClient(\n  context: CliCommandContext,\n  datasetName: string,\n  apiVersion: string,\n): Promise<ResolvedApiClient> {\n  const {apiClient} = context\n\n  let client = apiClient()\n  const {projectId, token} = client.config()\n\n  if (!projectId) {\n    throw new Error('Project ID not defined')\n  }\n\n  // If no dataset provided, explicitly ask for dataset instead of using dataset\n  // configured in Sanity config. Aligns with `sanity dataset export` behavior.\n  let selectedDataset: string = datasetName\n  if (!selectedDataset) {\n    selectedDataset = await chooseDatasetPrompt(context, {\n      message: 'Select the dataset name:',\n    })\n  }\n\n  client = client.withConfig({dataset: datasetName, apiVersion})\n\n  return {\n    projectId,\n    datasetName: selectedDataset,\n    token,\n    client,\n  }\n}\n\nexport default resolveApiClient\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport {defaultApiVersion} from './backupGroup'\n\nconst helpText = `\nExamples\n  sanity backup disable DATASET_NAME\n`\n\nconst disableDatasetBackupCommand: CliCommandDefinition = {\n  name: 'disable',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'Disable backup for a dataset.',\n  helpText,\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const [dataset] = args.argsWithoutOptions\n    const {projectId, datasetName, token, client} = await resolveApiClient(\n      context,\n      dataset,\n      defaultApiVersion,\n    )\n\n    try {\n      await client.request({\n        method: 'PUT',\n        headers: {Authorization: `Bearer ${token}`},\n        uri: `/projects/${projectId}/datasets/${datasetName}/settings/backups`,\n        body: {\n          enabled: false,\n        },\n      })\n      output.print(`${chalk.green(`Disabled daily backups for dataset ${datasetName}\\n`)}`)\n    } catch (error) {\n      const {message} = parseApiErr(error)\n      output.print(`${chalk.red(`Disabling dataset backup failed: ${message}`)}\\n`)\n    }\n  },\n}\n\nexport default disableDatasetBackupCommand\n","export default require('debug')('sanity:backup')\n","import {createWriteStream} from 'node:fs'\nimport zlib from 'node:zlib'\n\nimport {type ProgressData} from 'archiver'\n\nimport debug from './debug'\n\nconst archiver = require('archiver')\n\n// ProgressCb is a callback that is called with the number of bytes processed so far.\ntype ProgressCb = (processedBytes: number) => void\n\n// archiveDir creates a tarball of the given directory and writes it to the given file path.\nfunction archiveDir(tmpOutDir: string, outFilePath: string, progressCb: ProgressCb): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const archiveDestination = createWriteStream(outFilePath)\n    archiveDestination.on('error', (err: Error) => {\n      reject(err)\n    })\n\n    archiveDestination.on('close', () => {\n      resolve()\n    })\n\n    const archive = archiver('tar', {\n      gzip: true,\n      gzipOptions: {level: zlib.constants.Z_DEFAULT_COMPRESSION},\n    })\n\n    archive.on('error', (err: Error) => {\n      debug('Archiving errored!\\n%s', err.stack)\n      reject(err)\n    })\n\n    // Catch warnings for non-blocking errors (stat failures and others)\n    archive.on('warning', (err: Error) => {\n      debug('Archive warning: %s', err.message)\n    })\n\n    archive.on('progress', (progress: ProgressData) => {\n      progressCb(progress.fs.processedBytes)\n    })\n\n    // Pipe archive data to the file\n    archive.pipe(archiveDestination)\n    archive.directory(tmpOutDir, false)\n    archive.finalize()\n  })\n}\n\nexport default archiveDir\n","import {type CliCommandContext} from '@sanity/cli'\n\nimport {defaultApiVersion} from '../../commands/backup/backupGroup'\nimport resolveApiClient from './resolveApiClient'\n\n// maxBackupIdsShown is the maximum number of backup IDs to show in the prompt.\n// Higher numbers will cause the prompt to be slow.\nconst maxBackupIdsShown = 100\n\nasync function chooseBackupIdPrompt(\n  context: CliCommandContext,\n  datasetName: string,\n): Promise<string> {\n  const {prompt} = context\n\n  const {projectId, token, client} = await resolveApiClient(context, datasetName, defaultApiVersion)\n\n  try {\n    // Fetch last $maxBackupIdsShown backups for this dataset.\n    // We expect here that API returns backups sorted by creation date in descending order.\n    const response = await client.request({\n      headers: {Authorization: `Bearer ${token}`},\n      uri: `/projects/${projectId}/datasets/${datasetName}/backups`,\n      query: {limit: maxBackupIdsShown.toString()},\n    })\n\n    if (response?.backups?.length > 0) {\n      const backupIdChoices = response.backups.map((backup: {id: string}) => ({\n        value: backup.id,\n      }))\n      const selected = await prompt.single({\n        message: `Select backup ID to use (only last ${maxBackupIdsShown} shown)`,\n        type: 'list',\n        choices: backupIdChoices,\n      })\n\n      return selected\n    }\n  } catch (err) {\n    throw new Error(`Failed to fetch backups for dataset ${datasetName}: ${err.message}`)\n  }\n\n  throw new Error('No backups found')\n}\n\nexport default chooseBackupIdPrompt\n","import {rimraf} from 'rimraf'\n\nimport debug from './debug'\n\nasync function cleanupTmpDir(tmpDir: string): Promise<void> {\n  try {\n    await rimraf(tmpDir)\n  } catch (err) {\n    debug(`Error cleaning up temporary files: ${err.message}`)\n  }\n}\n\nexport default cleanupTmpDir\n","import debug from './debug'\n\nconst MAX_RETRIES = 5\nconst BACKOFF_DELAY_BASE = 200\n\nconst exponentialBackoff = (retryCount: number) => Math.pow(2, retryCount) * BACKOFF_DELAY_BASE\n\nasync function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = MAX_RETRIES,\n): Promise<T> {\n  for (let retryCount = 0; retryCount < maxRetries; retryCount++) {\n    try {\n      return await operation()\n    } catch (err) {\n      // Immediately rethrow if the error is not server-related.\n      if (err.response && err.response.statusCode && err.response.statusCode < 500) {\n        throw err\n      }\n\n      const retryDelay = exponentialBackoff(retryCount)\n      debug(`Error encountered, retrying after ${retryDelay}ms: %s`, err.message)\n      await new Promise((resolve) => setTimeout(resolve, retryDelay))\n    }\n  }\n\n  throw new Error('Operation failed after all retries')\n}\n\nexport default withRetry\n","import {createWriteStream} from 'node:fs'\nimport path from 'node:path'\nimport {pipeline} from 'node:stream/promises'\n\nimport {getIt} from 'get-it'\n// eslint-disable-next-line import/extensions\nimport {keepAlive, promise} from 'get-it/middleware'\n\nimport debug from './debug'\nimport withRetry from './withRetry'\n\nconst CONNECTION_TIMEOUT = 15 * 1000 // 15 seconds\nconst READ_TIMEOUT = 3 * 60 * 1000 // 3 minutes\n\nconst request = getIt([keepAlive(), promise()])\n\nasync function downloadAsset(\n  url: string,\n  fileName: string,\n  fileType: string,\n  outDir: string,\n): Promise<void> {\n  // File names that contain a path to file (e.g. sanity-storage/assets/file-name.tar.gz) fail when archive is\n  // created due to missing parent dir (e.g. sanity-storage/assets), so we want to handle them by taking\n  // the base name as file name.\n  const normalizedFileName = path.basename(fileName)\n\n  const assetFilePath = getAssetFilePath(normalizedFileName, fileType, outDir)\n  await withRetry(async () => {\n    const response = await request({\n      url: url,\n      maxRedirects: 5,\n      timeout: {connect: CONNECTION_TIMEOUT, socket: READ_TIMEOUT},\n      stream: true,\n    })\n\n    debug('Received asset %s with status code %d', normalizedFileName, response?.statusCode)\n\n    await pipeline(response.body, createWriteStream(assetFilePath))\n  })\n}\n\nfunction getAssetFilePath(fileName: string, fileType: string, outDir: string): string {\n  // Set assetFilePath if we are downloading an asset file.\n  // If it's a JSON document, assetFilePath will be an empty string.\n  let assetFilePath = ''\n  if (fileType === 'image') {\n    assetFilePath = path.join(outDir, 'images', fileName)\n  } else if (fileType === 'file') {\n    assetFilePath = path.join(outDir, 'files', fileName)\n  }\n\n  return assetFilePath\n}\n\nexport default downloadAsset\n","import {getIt, type MiddlewareResponse} from 'get-it'\n// eslint-disable-next-line import/extensions\nimport {keepAlive, promise} from 'get-it/middleware'\n\nimport debug from './debug'\nimport withRetry from './withRetry'\n\nconst CONNECTION_TIMEOUT = 15 * 1000 // 15 seconds\nconst READ_TIMEOUT = 3 * 60 * 1000 // 3 minutes\n\nconst request = getIt([keepAlive(), promise()])\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function downloadDocument(url: string): Promise<any> {\n  const response = await withRetry<MiddlewareResponse>(() =>\n    request({\n      url,\n      maxRedirects: 5,\n      timeout: {connect: CONNECTION_TIMEOUT, socket: READ_TIMEOUT},\n    }),\n  )\n\n  debug('Received document from %s with status code %d', url, response?.statusCode)\n\n  return response.body\n}\n\nexport default downloadDocument\n","import {Readable} from 'node:stream'\n\nimport {type QueryParams, type SanityClient} from '@sanity/client'\n\ntype File = {\n  name: string\n  url: string\n  type: string\n}\n\ntype GetBackupResponse = {\n  createdAt: string\n  totalFiles: number\n  files: File[]\n  nextCursor?: string\n}\n\nclass PaginatedGetBackupStream extends Readable {\n  private cursor = ''\n  private readonly client: SanityClient\n  private readonly projectId: string\n  private readonly datasetName: string\n  private readonly backupId: string\n  private readonly token: string\n  public totalFiles = 0\n\n  constructor(\n    client: SanityClient,\n    projectId: string,\n    datasetName: string,\n    backupId: string,\n    token: string,\n  ) {\n    super({objectMode: true})\n    this.client = client\n    this.projectId = projectId\n    this.datasetName = datasetName\n    this.backupId = backupId\n    this.token = token\n  }\n\n  async _read(): Promise<void> {\n    try {\n      const data = await this.fetchNextBackupPage()\n\n      // Set totalFiles when it's fetched for the first time\n      if (this.totalFiles === 0) {\n        this.totalFiles = data.totalFiles\n      }\n\n      data.files.forEach((file: File) => this.push(file))\n\n      if (typeof data.nextCursor === 'string' && data.nextCursor !== '') {\n        this.cursor = data.nextCursor\n      } else {\n        // No more pages left to fetch.\n        this.push(null)\n      }\n    } catch (err) {\n      this.destroy(err as Error)\n    }\n  }\n\n  // fetchNextBackupPage fetches the next page of backed up files from the backup API.\n  async fetchNextBackupPage(): Promise<GetBackupResponse> {\n    const query: QueryParams = this.cursor === '' ? {} : {nextCursor: this.cursor}\n\n    try {\n      return await this.client.request({\n        headers: {Authorization: `Bearer ${this.token}`},\n        uri: `/projects/${this.projectId}/datasets/${this.datasetName}/backups/${this.backupId}`,\n        query,\n      })\n    } catch (error) {\n      // It can be clearer to pull this logic out in a  common error handling function for re-usability.\n      let msg = error.statusCode ? error.response.body.message : error.message\n\n      // If no message can be extracted, print the whole error.\n      if (msg === undefined) {\n        msg = String(error)\n      }\n      throw new Error(`Downloading dataset backup failed: ${msg}`)\n    }\n  }\n}\n\nexport {PaginatedGetBackupStream}\nexport type {File, GetBackupResponse}\n","import {type CliOutputter} from '@sanity/cli'\nimport prettyMs from 'pretty-ms'\n\ntype ProgressEvent = {\n  step: string\n  update?: boolean\n  current?: number\n  total?: number\n}\n\ninterface ProgressSpinner {\n  set: (progress: ProgressEvent) => void\n  update: (progress: ProgressEvent) => void\n  succeed: () => void\n  fail: () => void\n}\n\nconst newProgress = (output: CliOutputter, startStep: string): ProgressSpinner => {\n  let spinner = output.spinner(startStep).start()\n  let lastProgress: ProgressEvent = {step: startStep}\n  let start = Date.now()\n\n  const print = (progress: ProgressEvent) => {\n    const elapsed = prettyMs(Date.now() - start)\n    if (progress.current && progress.current > 0 && progress.total && progress.total > 0) {\n      spinner.text = `${progress.step} (${progress.current}/${progress.total}) [${elapsed}]`\n    } else {\n      spinner.text = `${progress.step} [${elapsed}]`\n    }\n  }\n\n  return {\n    set: (progress: ProgressEvent) => {\n      if (progress.step !== lastProgress.step) {\n        print(lastProgress) // Print the last progress before moving on\n        spinner.succeed()\n        spinner = output.spinner(progress.step).start()\n        start = Date.now()\n      } else if (progress.step === lastProgress.step && progress.update) {\n        print(progress)\n      }\n      lastProgress = progress\n    },\n    update: (progress: ProgressEvent) => {\n      print(progress)\n      lastProgress = progress\n    },\n    succeed: () => {\n      spinner.succeed()\n      start = Date.now()\n    },\n    fail: () => {\n      spinner.fail()\n      start = Date.now()\n    },\n  }\n}\n\nexport default newProgress\n","function humanFileSize(size: number): string {\n  const i = size == 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024))\n  return `${(size / Math.pow(1024, i)).toFixed(2)} ${['B', 'kB', 'MB', 'GB', 'TB'][i]}`\n}\n\nexport default humanFileSize\n","function isPathDirName(filepath: string): boolean {\n  // Check if the path has an extension, commonly indicating a file\n  return !/\\.\\w+$/.test(filepath)\n}\n\nexport default isPathDirName\n","import {createWriteStream, existsSync, mkdirSync} from 'node:fs'\nimport {mkdtemp} from 'node:fs/promises'\nimport {tmpdir} from 'node:os'\nimport path from 'node:path'\nimport {finished} from 'node:stream/promises'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n  type SanityClient,\n} from '@sanity/cli'\nimport {absolutify} from '@sanity/util/fs'\nimport {Mutex} from 'async-mutex'\nimport createDebug from 'debug'\nimport {isString} from 'lodash'\nimport prettyMs from 'pretty-ms'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport archiveDir from '../../actions/backup/archiveDir'\nimport chooseBackupIdPrompt from '../../actions/backup/chooseBackupIdPrompt'\nimport cleanupTmpDir from '../../actions/backup/cleanupTmpDir'\nimport downloadAsset from '../../actions/backup/downloadAsset'\nimport downloadDocument from '../../actions/backup/downloadDocument'\nimport {type File, PaginatedGetBackupStream} from '../../actions/backup/fetchNextBackupPage'\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport newProgress from '../../actions/backup/progressSpinner'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport humanFileSize from '../../util/humanFileSize'\nimport isPathDirName from '../../util/isPathDirName'\nimport {defaultApiVersion} from './backupGroup'\n\nconst debug = createDebug('sanity:backup')\n\nconst DEFAULT_DOWNLOAD_CONCURRENCY = 10\nconst MAX_DOWNLOAD_CONCURRENCY = 24\n\ninterface DownloadBackupOptions {\n  projectId: string\n  datasetName: string\n  token: string\n  backupId: string\n  outDir: string\n  outFileName: string\n  overwrite: boolean\n  concurrency: number\n}\n\nconst helpText = `\nOptions\n  --backup-id <string> The backup ID to download. (required)\n  --out <string>       The file or directory path the backup should download to.\n  --overwrite          Allows overwriting of existing backup file.\n  --concurrency <num>  Concurrent number of backup item downloads. (max: 24)\n\nExamples\n  sanity backup download DATASET_NAME --backup-id 2024-01-01-backup-1\n  sanity backup download DATASET_NAME --backup-id 2024-01-01-backup-2 --out /path/to/file\n  sanity backup download DATASET_NAME --backup-id 2024-01-01-backup-3 --out /path/to/file --overwrite\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .options('backup-id', {type: 'string'})\n    .options('out', {type: 'string'})\n    .options('concurrency', {type: 'number', default: DEFAULT_DOWNLOAD_CONCURRENCY})\n    .options('overwrite', {type: 'boolean', default: false}).argv\n}\n\nconst downloadBackupCommand: CliCommandDefinition = {\n  name: 'download',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'Download a dataset backup to a local file.',\n  helpText,\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const [client, opts] = await prepareBackupOptions(context, args)\n    const {projectId, datasetName, backupId, outDir, outFileName} = opts\n\n    // If any of the output path or file name is empty, cancel the operation.\n    if (outDir === '' || outFileName === '') {\n      output.print('Operation cancelled.')\n      return\n    }\n    const outFilePath = path.join(outDir, outFileName)\n\n    output.print('╭───────────────────────────────────────────────────────────╮')\n    output.print('│                                                           │')\n    output.print('│ Downloading backup for:                                   │')\n    output.print(`│ ${chalk.bold('projectId')}: ${chalk.cyan(projectId).padEnd(56)} │`)\n    output.print(`│ ${chalk.bold('dataset')}: ${chalk.cyan(datasetName).padEnd(58)} │`)\n    output.print(`│ ${chalk.bold('backupId')}: ${chalk.cyan(backupId).padEnd(56)} │`)\n    output.print('│                                                           │')\n    output.print('╰───────────────────────────────────────────────────────────╯')\n    output.print('')\n    output.print(`Downloading backup to \"${chalk.cyan(outFilePath)}\"`)\n\n    const start = Date.now()\n    const progressSpinner = newProgress(output, 'Setting up backup environment...')\n\n    // Create a unique temporary directory to store files before bundling them into the archive at outputPath.\n    // Temporary directories are normally deleted at the end of backup process, any unexpected exit may leave them\n    // behind, hence it is important to create a unique directory for each attempt.\n    const tmpOutDir = await mkdtemp(path.join(tmpdir(), `sanity-backup-`))\n\n    // Create required directories if they don't exist.\n    for (const dir of [outDir, path.join(tmpOutDir, 'images'), path.join(tmpOutDir, 'files')]) {\n      mkdirSync(dir, {recursive: true})\n    }\n\n    debug('Writing to temporary directory %s', tmpOutDir)\n    const tmpOutDocumentsFile = path.join(tmpOutDir, 'data.ndjson')\n\n    // Handle concurrent writes to the same file using mutex.\n    const docOutStream = createWriteStream(tmpOutDocumentsFile)\n    const docWriteMutex = new Mutex()\n\n    try {\n      const backupFileStream = new PaginatedGetBackupStream(\n        client,\n        opts.projectId,\n        opts.datasetName,\n        opts.backupId,\n        opts.token,\n      )\n\n      const files: File[] = []\n      let i = 0\n      for await (const file of backupFileStream) {\n        files.push(file)\n        i++\n        progressSpinner.set({\n          step: `Reading backup files...`,\n          update: true,\n          current: i,\n          total: backupFileStream.totalFiles,\n        })\n      }\n\n      let totalItemsDownloaded = 0\n      // This is dynamically imported because this module is ESM only and this file gets compiled to CJS at this time.\n      const {default: pMap} = await import('p-map')\n      await pMap(\n        files,\n        async (file: File) => {\n          if (file.type === 'file' || file.type === 'image') {\n            await downloadAsset(file.url, file.name, file.type, tmpOutDir)\n          } else {\n            const doc = await downloadDocument(file.url)\n            await docWriteMutex.runExclusive(() => {\n              docOutStream.write(`${doc}\\n`)\n            })\n          }\n\n          totalItemsDownloaded += 1\n          progressSpinner.set({\n            step: `Downloading documents and assets...`,\n            update: true,\n            current: totalItemsDownloaded,\n            total: backupFileStream.totalFiles,\n          })\n        },\n        {concurrency: opts.concurrency},\n      )\n    } catch (error) {\n      progressSpinner.fail()\n      const {message} = parseApiErr(error)\n      throw new Error(`Downloading dataset backup failed: ${message}`)\n    }\n\n    docOutStream.end()\n    await finished(docOutStream)\n\n    progressSpinner.set({step: `Archiving files into a tarball...`, update: true})\n    try {\n      await archiveDir(tmpOutDir, outFilePath, (processedBytes: number) => {\n        progressSpinner.update({\n          step: `Archiving files into a tarball, ${humanFileSize(processedBytes)} bytes written...`,\n        })\n      })\n    } catch (err) {\n      progressSpinner.fail()\n      throw new Error(`Archiving backup failed: ${err.message}`)\n    }\n\n    progressSpinner.set({\n      step: `Cleaning up temporary files at ${chalk.cyan(`${tmpOutDir}`)}`,\n    })\n    await cleanupTmpDir(tmpOutDir)\n\n    progressSpinner.set({\n      step: `Backup download complete [${prettyMs(Date.now() - start)}]`,\n    })\n    progressSpinner.succeed()\n  },\n}\n\n// prepareBackupOptions validates backup options from CLI and prepares Client and DownloadBackupOptions.\nasync function prepareBackupOptions(\n  context: CliCommandContext,\n  args: CliCommandArguments,\n): Promise<[SanityClient, DownloadBackupOptions]> {\n  const flags = await parseCliFlags(args)\n  const [dataset] = args.argsWithoutOptions\n  const {prompt, workDir} = context\n  const {projectId, datasetName, client} = await resolveApiClient(\n    context,\n    dataset,\n    defaultApiVersion,\n  )\n\n  const {token} = client.config()\n  if (!isString(token) || token.length < 1) {\n    throw new Error(`token is missing`)\n  }\n\n  if (!isString(datasetName) || datasetName.length < 1) {\n    throw new Error(`dataset ${datasetName} must be a valid dataset name`)\n  }\n\n  const backupId = String(flags['backup-id'] || (await chooseBackupIdPrompt(context, datasetName)))\n  if (backupId.length < 1) {\n    throw new Error(`backup-id ${flags['backup-id']} should be a valid string`)\n  }\n\n  if ('concurrency' in flags) {\n    if (flags.concurrency < 1 || flags.concurrency > MAX_DOWNLOAD_CONCURRENCY) {\n      throw new Error(`concurrency should be in 1 to ${MAX_DOWNLOAD_CONCURRENCY} range`)\n    }\n  }\n\n  const defaultOutFileName = `${datasetName}-backup-${backupId}.tar.gz`\n  let out = await (async (): Promise<string> => {\n    if (flags.out !== undefined) {\n      // Rewrite the output path to an absolute path, if it is not already.\n      return absolutify(flags.out)\n    }\n\n    const input = await prompt.single({\n      type: 'input',\n      message: 'Output path:',\n      default: path.join(workDir, defaultOutFileName),\n      filter: absolutify,\n    })\n    return input\n  })()\n\n  // If path is a directory name, then add a default file name to the path.\n  if (isPathDirName(out)) {\n    out = path.join(out, defaultOutFileName)\n  }\n\n  // If the file already exists, ask for confirmation if it should be overwritten.\n  if (!flags.overwrite && existsSync(out)) {\n    const shouldOverwrite = await prompt.single({\n      type: 'confirm',\n      message: `File \"${out}\" already exists, would you like to overwrite it?`,\n      default: false,\n    })\n\n    // If the user does not want to overwrite the file, set the output path to an empty string.\n    // This should be handled by the caller of this function as cancel operation.\n    if (!shouldOverwrite) {\n      out = ''\n    }\n  }\n\n  return [\n    client,\n    {\n      projectId,\n      datasetName,\n      backupId,\n      token,\n      outDir: path.dirname(out),\n      outFileName: path.basename(out),\n      overwrite: flags.overwrite,\n      concurrency: flags.concurrency || DEFAULT_DOWNLOAD_CONCURRENCY,\n    },\n  ]\n}\n\nexport default downloadBackupCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport {defaultApiVersion} from './backupGroup'\n\nconst helpText = `\nExamples\n  sanity backup enable DATASET_NAME\n`\n\nconst enableDatasetBackupCommand: CliCommandDefinition = {\n  name: 'enable',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'Enable backup for a dataset.',\n  helpText,\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const [dataset] = args.argsWithoutOptions\n    const {projectId, datasetName, token, client} = await resolveApiClient(\n      context,\n      dataset,\n      defaultApiVersion,\n    )\n\n    try {\n      await client.request({\n        method: 'PUT',\n        headers: {Authorization: `Bearer ${token}`},\n        uri: `/projects/${projectId}/datasets/${datasetName}/settings/backups`,\n        body: {\n          enabled: true,\n        },\n      })\n\n      output.print(\n        `${chalk.green(\n          `Enabled backups for dataset ${datasetName}.\\nPlease note that it may take up to 24 hours before the first backup is created.\\n`,\n        )}`,\n      )\n\n      output.print(\n        `${chalk.bold(`Retention policies may apply depending on your plan and agreement.\\n`)}`,\n      )\n    } catch (error) {\n      const {message} = parseApiErr(error)\n      output.print(`${chalk.red(`Enabling dataset backup failed: ${message}`)}\\n`)\n    }\n  },\n}\nexport default enableDatasetBackupCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {Table} from 'console-table-printer'\nimport {isAfter, isValid, lightFormat, parse} from 'date-fns'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport {defaultApiVersion} from './backupGroup'\n\nconst DEFAULT_LIST_BACKUP_LIMIT = 30\n\ninterface ListDatasetBackupFlags {\n  before?: string\n  after?: string\n  limit?: string\n}\n\ntype ListBackupRequestQueryParams = {\n  before?: string\n  after?: string\n  limit: string\n}\n\ntype ListBackupResponse = {\n  backups: ListBackupResponseItem[]\n}\n\ntype ListBackupResponseItem = {\n  id: string\n  createdAt: string\n}\n\nconst helpText = `\nOptions\n  --limit <int>     Maximum number of backups returned. Default 30.\n  --after <string>  Only return backups after this date (inclusive)\n  --before <string> Only return backups before this date (exclusive). Cannot be younger than <after> if specified.\n\nExamples\n  sanity backup list DATASET_NAME\n  sanity backup list DATASET_NAME --limit 50\n  sanity backup list DATASET_NAME --after 2024-01-31 --limit 10\n  sanity backup list DATASET_NAME --after 2024-01-31 --before 2024-01-10\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .options('after', {type: 'string'})\n    .options('before', {type: 'string'})\n    .options('limit', {type: 'number', default: DEFAULT_LIST_BACKUP_LIMIT, alias: 'l'}).argv\n}\n\nconst listDatasetBackupCommand: CliCommandDefinition<ListDatasetBackupFlags> = {\n  name: 'list',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'List available backups for a dataset.',\n  helpText,\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const flags = await parseCliFlags(args)\n    const [dataset] = args.argsWithoutOptions\n\n    const {projectId, datasetName, token, client} = await resolveApiClient(\n      context,\n      dataset,\n      defaultApiVersion,\n    )\n\n    const query: ListBackupRequestQueryParams = {limit: DEFAULT_LIST_BACKUP_LIMIT.toString()}\n    if (flags.limit) {\n      // We allow limit up to Number.MAX_SAFE_INTEGER to leave it for server-side validation,\n      //  while still sending sensible value in limit string.\n      if (flags.limit < 1 || flags.limit > Number.MAX_SAFE_INTEGER) {\n        throw new Error(\n          `Parsing --limit: must be an integer between 1 and ${Number.MAX_SAFE_INTEGER}`,\n        )\n      }\n      query.limit = flags.limit.toString()\n    }\n\n    if (flags.before || flags.after) {\n      try {\n        const parsedBefore = processDateFlags(flags.before)\n        const parsedAfter = processDateFlags(flags.after)\n\n        if (parsedAfter && parsedBefore && isAfter(parsedAfter, parsedBefore)) {\n          throw new Error('--after date must be before --before')\n        }\n\n        query.before = flags.before\n        query.after = flags.after\n      } catch (err) {\n        throw new Error(`Parsing date flags: ${err}`)\n      }\n    }\n\n    let response\n    try {\n      response = await client.request<ListBackupResponse>({\n        headers: {Authorization: `Bearer ${token}`},\n        uri: `/projects/${projectId}/datasets/${datasetName}/backups`,\n        query: {...query},\n      })\n    } catch (error) {\n      const {message} = parseApiErr(error)\n      output.error(`${chalk.red(`List dataset backup failed: ${message}`)}\\n`)\n    }\n\n    if (response && response.backups) {\n      if (response.backups.length === 0) {\n        output.print('No backups found.')\n        return\n      }\n\n      const table = new Table({\n        columns: [\n          {name: 'resource', title: 'RESOURCE', alignment: 'left'},\n          {name: 'createdAt', title: 'CREATED AT', alignment: 'left'},\n          {name: 'backupId', title: 'BACKUP ID', alignment: 'left'},\n        ],\n      })\n\n      response.backups.forEach((backup: ListBackupResponseItem) => {\n        const {id, createdAt} = backup\n        table.addRow({\n          resource: 'Dataset',\n          createdAt: lightFormat(Date.parse(createdAt), 'yyyy-MM-dd HH:mm:ss'),\n          backupId: id,\n        })\n      })\n\n      table.printTable()\n    }\n  },\n}\n\nfunction processDateFlags(date: string | undefined): Date | undefined {\n  if (!date) return undefined\n  const parsedDate = parse(date, 'yyyy-MM-dd', new Date())\n  if (isValid(parsedDate)) {\n    return parsedDate\n  }\n\n  throw new Error(`Invalid ${date} date format. Use YYYY-MM-DD`)\n}\n\nexport default listDatasetBackupCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport {BuildSanityStudioCommandFlags} from '../../actions/build/buildAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --auto-updates / --no-auto-updates Enable/disable auto updates of studio versions\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  -y, --yes Unattended mode, answers \"yes\" to any \"yes/no\" prompt and otherwise uses defaults\n\nExamples\n  sanity build\n  sanity build --no-minify --source-maps\n`\n\nconst buildCommand: CliCommandDefinition = {\n  name: 'build',\n  signature: '[OUTPUT_DIR]',\n  description: 'Builds the Sanity Studio configuration into a static bundle',\n  action: async (\n    args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n    context: CliCommandContext,\n    overrides?: {basePath?: string},\n  ) => {\n    const buildAction = await getBuildAction()\n\n    return buildAction(args, context, overrides)\n  },\n  helpText,\n}\n\nasync function getBuildAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions\n    const mod: typeof import('../../actions/build/buildAction') = require('../../actions/build/buildAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/build/buildAction')\n\n  return mod.default\n}\n\nexport default buildCommand\n","import url from 'node:url'\n\nimport {type CliCommandContext, type CliPrompter} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport oneline from 'oneline'\n\nconst wildcardReplacement = 'a-wild-card-r3pl4c3m3n7-a'\nconst portReplacement = ':7777777'\n\ninterface AddCorsOriginFlags {\n  credentials?: boolean\n}\n\nexport async function addCorsOrigin(\n  givenOrigin: string,\n  flags: AddCorsOriginFlags,\n  context: CliCommandContext,\n): Promise<boolean> {\n  const {apiClient, prompt, output} = context\n  const origin = await (givenOrigin\n    ? filterAndValidateOrigin(givenOrigin)\n    : promptForOrigin(prompt))\n\n  const hasWildcard = origin.includes('*')\n  if (hasWildcard && !(await promptForWildcardConfirmation(origin, context))) {\n    return false\n  }\n  const allowCredentials =\n    typeof flags.credentials === 'undefined'\n      ? await promptForCredentials(hasWildcard, context)\n      : Boolean(flags.credentials)\n\n  if (givenOrigin !== origin) {\n    output.print(`Normalized origin to ${origin}`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  await client.request({\n    method: 'POST',\n    url: '/cors',\n    body: {origin, allowCredentials},\n    maxRedirects: 0,\n  })\n\n  return true\n}\n\nfunction promptForCredentials(hasWildcard: boolean, context: CliCommandContext): Promise<string> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  if (hasWildcard) {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      We ${chalk.red(chalk.underline('HIGHLY'))} recommend NOT allowing credentials\n      on origins containing wildcards. If you are logged in to a studio, people will\n      be able to send requests ${chalk.underline('on your behalf')} to read and modify\n      data, from any matching origin. Please tread carefully!\n    `)\n  } else {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      Should this origin be allowed to send requests using authentication tokens or\n      session cookies? Be aware that any script on this origin will be able to send\n      requests ${chalk.underline('on your behalf')} to read and modify data if you\n      are logged in to a Sanity studio. If this origin hosts a studio, you will need\n      this, otherwise you should probably answer \"No\" (n).\n    `)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Allow credentials to be sent from this origin? Please read the warning above.\n    `,\n    default: false,\n  })\n}\n\nfunction promptForWildcardConfirmation(\n  origin: string,\n  context: CliCommandContext,\n): Promise<boolean> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  output.print(chalk.yellow(`${logSymbols.warning} Warning: Examples of allowed origins:`))\n\n  if (origin === '*') {\n    output.print('- http://www.some-malicious.site')\n    output.print('- https://not.what-you-were-expecting.com')\n    output.print('- https://high-traffic-site.com')\n    output.print('- http://192.168.1.1:8080')\n  } else {\n    output.print(`- ${origin.replace(/:\\*/, ':1234').replace(/\\*/g, 'foo')}`)\n    output.print(`- ${origin.replace(/:\\*/, ':3030').replace(/\\*/g, 'foo.bar')}`)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Using wildcards can be ${chalk.red('risky')}.\n      Are you ${chalk.underline('absolutely sure')} you want to allow this origin?`,\n    default: false,\n  })\n}\n\nfunction promptForOrigin(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Origin (including protocol):',\n    filter: filterOrigin,\n    validate: (origin) => validateOrigin(origin, origin),\n  })\n}\n\nfunction filterOrigin(origin: string): string | null {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return origin\n  }\n\n  try {\n    const example = origin\n      .replace(/([^:])\\*/g, `$1${wildcardReplacement}`)\n      .replace(/:\\*/, portReplacement)\n\n    const parsed = url.parse(example)\n    let host = parsed.host || ''\n    if (/^https?:$/.test(parsed.protocol || '')) {\n      host = host.replace(/:(80|443)$/, '')\n    }\n\n    host = host.replace(portReplacement, ':*').replace(new RegExp(wildcardReplacement, 'g'), '*')\n\n    return `${parsed.protocol}//${host}`\n  } catch (err) {\n    return null\n  }\n}\n\nfunction validateOrigin(origin: string | null, givenOrigin: string): true | string {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return true\n  }\n\n  try {\n    url.parse(origin || (0 as any as string)) // Use 0 to trigger error for unset values\n    return true\n  } catch (err) {\n    // Fall-through to error\n  }\n\n  if (/^file:\\/\\//.test(givenOrigin)) {\n    return `Only a local file wildcard is currently allowed: file:///*`\n  }\n\n  return `Invalid origin \"${givenOrigin}\", must include protocol (https://some.host)`\n}\n\nfunction filterAndValidateOrigin(givenOrigin: string): string {\n  const origin = filterOrigin(givenOrigin)\n  const result = validateOrigin(origin, givenOrigin)\n  if (result !== true) {\n    throw new Error(result)\n  }\n\n  if (!origin) {\n    throw new Error('Invalid origin')\n  }\n\n  return origin\n}\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\n\nimport {addCorsOrigin} from '../../actions/cors/addCorsOrigin'\n\nconst helpText = `\nOptions\n  --credentials Allow credentials (token/cookie) to be sent from this origin\n  --no-credentials Disallow credentials (token/cookie) to be sent from this origin\n\nExamples\n  sanity cors add\n  sanity cors add http://localhost:3000 --no-credentials\n`\n\nconst addCorsOriginCommand: CliCommandDefinition = {\n  name: 'add',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Allow a new origin to use your project API through CORS',\n  action: async (args, context) => {\n    const {output} = context\n    const [origin] = args.argsWithoutOptions\n\n    if (!origin) {\n      throw new Error('No origin specified, use `sanity cors add <origin-url>`')\n    }\n\n    const flags = args.extOptions\n\n    // eslint-disable-next-line no-sync\n    const isFile = fs.existsSync(path.join(process.cwd(), origin))\n    if (isFile) {\n      output.warn(`Origin \"${origin}?\" Remember to quote values (sanity cors add \"*\")`)\n    }\n\n    const success = await addCorsOrigin(origin, flags, context)\n    if (success) {\n      output.print('CORS origin added successfully')\n    }\n  },\n}\n\nexport default addCorsOriginCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst corsGroup: CliCommandGroupDefinition = {\n  name: 'cors',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Configures CORS settings for Sanity projects',\n}\n\nexport default corsGroup\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\n\nimport {type CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors delete\n  sanity cors delete http://localhost:3000\n`\n\nconst deleteCorsOriginCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Delete an existing CORS-origin from your project',\n  action: async (args, context) => {\n    const {output, apiClient} = context\n    const [origin] = args.argsWithoutOptions\n    const client = apiClient({requireUser: true, requireProject: true})\n    const originId = await promptForOrigin(origin, context)\n    try {\n      await client.request({method: 'DELETE', uri: `/cors/${originId}`})\n      output.print('Origin deleted')\n    } catch (err) {\n      throw new Error(`Origin deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteCorsOriginCommand\n\nasync function promptForOrigin(specified: string | undefined, context: CliCommandContext) {\n  const specifiedOrigin = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient({requireUser: true, requireProject: true})\n\n  const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n  if (specifiedOrigin) {\n    const selected = origins.filter((origin) => origin.origin.toLowerCase() === specifiedOrigin)[0]\n    if (!selected) {\n      throw new Error(`Origin \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = origins.map((origin) => ({value: origin.id, name: origin.origin}))\n  return prompt.single({\n    message: 'Select origin to delete',\n    type: 'list',\n    choices,\n  })\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {type CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors list\n`\n\nconst listCorsOriginsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'cors',\n  signature: '',\n  helpText,\n  description: 'List all origins allowed to access the API for this project',\n  action: async (args, context) => {\n    const {output} = context\n    const {apiClient} = context\n    const client = apiClient({requireUser: true, requireProject: true})\n    const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n    output.print(origins.map((origin) => origin.origin).join('\\n'))\n  },\n}\n\nexport default listCorsOriginsCommand\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetAliasName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Alias name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Alias name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Alias name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Alias name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9~]/.test(name)) {\n    return 'Alias name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9~][-_a-z0-9]+$/.test(name)) {\n    return 'Alias name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Alias name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import {type CliPrompter} from '@sanity/cli'\n\nimport {validateDatasetAliasName} from './validateDatasetAliasName'\n\nexport function promptForDatasetAliasName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {},\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Alias name:',\n    validate: (name) => {\n      const err = validateDatasetAliasName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import {type SanityClient} from '@sanity/client'\n\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {type DatasetAliasDefinition, type DatasetModificationResponse} from './types'\n\nexport const ALIAS_PREFIX = '~'\n\nexport function listAliases(client: SanityClient): Promise<DatasetAliasDefinition[]> {\n  return client.request<DatasetAliasDefinition[]>({uri: '/aliases'})\n}\n\nexport function createAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null,\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PUT', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function updateAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null,\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PATCH', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function unlinkAlias(\n  client: SanityClient,\n  aliasName: string,\n): Promise<DatasetModificationResponse> {\n  validateDatasetAliasName(aliasName)\n  return modify(client, 'PATCH', `${aliasName}/unlink`, {})\n}\n\nexport function removeAlias(client: SanityClient, aliasName: string): Promise<{deleted: boolean}> {\n  return modify(client, 'DELETE', aliasName)\n}\n\nfunction modify(\n  client: SanityClient,\n  method: string,\n  aliasName: string,\n  body?: {datasetName?: string},\n) {\n  return client.request({method, uri: `/aliases/${aliasName}`, body})\n}\n","import {type CliCommandAction} from '@sanity/cli'\n\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const createAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, aliases, projectFeatures] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client).then((sets) => sets.map((ds) => ds.name)),\n    client.request({uri: '/features'}),\n  ])\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.slice(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" already exists`)\n  }\n\n  if (targetDataset) {\n    const datasetErr = validateDatasetName(targetDataset)\n    if (datasetErr) {\n      throw new Error(datasetErr)\n    }\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  if (datasetName && !datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const canCreateAlias = projectFeatures.includes('advancedDatasetManagement')\n  if (!canCreateAlias) {\n    throw new Error(`This project cannot create a dataset alias`)\n  }\n\n  try {\n    await aliasClient.createAlias(client, aliasName, datasetName)\n    output.print(\n      `Dataset alias ${aliasOutputName} created ${\n        datasetName && `and linked to ${datasetName}`\n      } successfully`,\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias creation failed:\\n${err.message}`)\n  }\n}\n","import {type CliCommandAction} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\ninterface DeleteAliasFlags {\n  force?: boolean\n}\n\nexport const deleteAliasHandler: CliCommandAction<DeleteAliasFlags> = async (args, context) => {\n  const {apiClient, prompt, output} = context\n  const [, ds] = args.argsWithoutOptions\n  const {force} = await parseCliFlags(args)\n  const client = apiClient()\n  if (!ds) {\n    throw new Error('Dataset alias name must be provided')\n  }\n\n  let aliasName = `${ds}`\n  const dsError = validateDatasetAliasName(aliasName)\n  if (dsError) {\n    throw dsError\n  }\n  aliasName = aliasName.startsWith(ALIAS_PREFIX) ? aliasName.slice(1) : aliasName\n\n  const [fetchedAliases] = await Promise.all([aliasClient.listAliases(client)])\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  const message =\n    linkedAlias && linkedAlias.datasetName\n      ? `This dataset alias is linked to ${linkedAlias.datasetName}. `\n      : ''\n\n  if (force) {\n    output.warn(`'--force' used: skipping confirmation, deleting alias \"${aliasName}\"`)\n  } else {\n    await prompt.single({\n      type: 'input',\n      message: `${message}Are you ABSOLUTELY sure you want to delete this dataset alias?\\n  Type the name of the dataset alias to confirm delete: `,\n      filter: (input) => `${input}`.trim(),\n      validate: (input) => {\n        return input === aliasName || 'Incorrect dataset alias name. Ctrl + C to cancel delete.'\n      },\n    })\n  }\n\n  return aliasClient.removeAlias(client, aliasName).then(() => {\n    output.print('Dataset alias deleted successfully')\n  })\n}\n","import {type CliCommandAction} from '@sanity/cli'\n\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const linkAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const flags = args.extOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, fetchedAliases] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client),\n  ])\n  const aliases = fetchedAliases.map((da) => da.name)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.slice(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (!aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist `)\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  const datasetErr = validateDatasetName(datasetName)\n  if (datasetErr) {\n    throw new Error(datasetErr)\n  }\n\n  if (!datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n\n  if (linkedAlias && linkedAlias.datasetName) {\n    if (linkedAlias.datasetName === datasetName) {\n      throw new Error(`Dataset alias ${aliasOutputName} already linked to ${datasetName}`)\n    }\n\n    if (!flags.force) {\n      await prompt.single({\n        type: 'input',\n        message: `This alias is linked to dataset <${linkedAlias.datasetName}>. Are you ABSOLUTELY sure you want to link this dataset alias to this dataset?\n        \\n  Type YES/NO: `,\n        filter: (input) => `${input}`.toLowerCase(),\n        validate: (input) => {\n          return input === 'yes' || 'Ctrl + C to cancel dataset alias link.'\n        },\n      })\n    }\n  }\n\n  try {\n    await aliasClient.updateAlias(client, aliasName, datasetName)\n    output.print(`Dataset alias ${aliasOutputName} linked to ${datasetName} successfully`)\n  } catch (err) {\n    throw new Error(`Dataset alias link failed:\\n${err.message}`)\n  }\n}\n","import {type CliCommandAction} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\ninterface UnlinkFlags {\n  force?: boolean\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\nexport const unlinkAliasHandler: CliCommandAction<UnlinkFlags> = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias] = args.argsWithoutOptions\n  const {force} = await parseCliFlags(args)\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const fetchedAliases = await aliasClient.listAliases(client)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.slice(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  // get the current alias from the remote alias list\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  if (!linkedAlias) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist`)\n  }\n\n  if (!linkedAlias.datasetName) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" is not linked to a dataset`)\n  }\n\n  if (force) {\n    output.warn(`'--force' used: skipping confirmation, unlinking alias \"${aliasOutputName}\"`)\n  } else {\n    await prompt.single({\n      type: 'input',\n      message: `Are you ABSOLUTELY sure you want to unlink this alias from the \"${linkedAlias.datasetName}\" dataset?\n        \\n  Type YES/NO: `,\n      filter: (input) => `${input}`.toLowerCase(),\n      validate: (input) => {\n        return input === 'yes' || 'Ctrl + C to cancel dataset alias unlink.'\n      },\n    })\n  }\n\n  try {\n    const result = await aliasClient.unlinkAlias(client, aliasName)\n    output.print(\n      `Dataset alias ${aliasOutputName} unlinked from ${result.datasetName} successfully`,\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias unlink failed:\\n${err.message}`)\n  }\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport oneline from 'oneline'\n\nimport {createAliasHandler} from './createAliasHandler'\nimport {deleteAliasHandler} from './deleteAliasHandler'\nimport {linkAliasHandler} from './linkAliasHandler'\nimport {unlinkAliasHandler} from './unlinkAliasHandler'\n\nconst helpText = `\nBelow are examples of the alias subcommand\n\nCreate Alias\n  sanity dataset alias create\n  sanity dataset alias create <alias-name>\n  sanity dataset alias create <alias-name> <target-dataset>\n\nDelete Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias delete <alias-name>\n    sanity dataset alias delete <alias-name> --force\n\nLink Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias link\n    sanity dataset alias link <alias-name>\n    sanity dataset alias link <alias-name> <target-dataset>\n    sanity dataset alias link <alias-name> <target-dataset> --force\n\nUn-link Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias unlink\n    sanity dataset alias unlink <alias-name>\n    sanity dataset alias unlink <alias-name> --force\n`\n\nconst aliasCommand: CliCommandDefinition = {\n  name: 'alias',\n  group: 'dataset',\n  signature: 'SUBCOMMAND [ALIAS_NAME, TARGET_DATASET]',\n  helpText,\n  description: 'You can manage your dataset alias using this command.',\n  action: async (args, context) => {\n    const [verb] = args.argsWithoutOptions\n    switch (verb) {\n      case 'create':\n        await createAliasHandler(args, context)\n        break\n      case 'delete':\n        await deleteAliasHandler(args, context)\n        break\n      case 'unlink':\n        await unlinkAliasHandler(args, context)\n        break\n      case 'link':\n        await linkAliasHandler(args, context)\n        break\n      default:\n        throw new Error(oneline`\n          Invalid command provided. Available commands are: create, delete, link and unlink.\n          For more guide run the help command 'sanity dataset alias --help'\n        `)\n    }\n  },\n}\n\nexport default aliasCommand\n","import {type CliCommandContext} from '@sanity/cli'\nimport {Table} from 'console-table-printer'\nimport {formatDistance, formatDistanceToNow, parseISO} from 'date-fns'\n\ninterface ListFlags {\n  offset?: number\n  limit?: number\n}\n\ntype CopyDatasetListResponse = {\n  id: string\n  state: string\n  createdAt: string\n  updatedAt: string\n  sourceDataset: string\n  targetDataset: string\n  withHistory: boolean\n}[]\n\nexport async function listDatasetCopyJobs(\n  flags: ListFlags,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, output, chalk} = context\n  const client = apiClient()\n  const projectId = client.config().projectId\n  const query: {offset?: string; limit?: string} = {}\n  let response\n\n  if (flags.offset && flags.offset >= 0) {\n    query.offset = `${flags.offset}`\n  }\n  if (flags.limit && flags.limit > 0) {\n    query.limit = `${flags.limit}`\n  }\n\n  try {\n    response = await client.request<CopyDatasetListResponse>({\n      method: 'GET',\n      uri: `/projects/${projectId}/datasets/copy`,\n      query,\n    })\n  } catch (error) {\n    if (error.statusCode) {\n      output.error(`${chalk.red(`Dataset copy list failed:\\n${error.response.body.message}`)}\\n`)\n    } else {\n      output.error(`${chalk.red(`Dataset copy list failed:\\n${error.message}`)}\\n`)\n    }\n  }\n\n  if (response && response.length > 0) {\n    const table = new Table({\n      title: 'Dataset copy jobs for this project in descending order',\n      columns: [\n        {name: 'id', title: 'Job ID', alignment: 'left'},\n        {name: 'sourceDataset', title: 'Source Dataset', alignment: 'left'},\n        {name: 'targetDataset', title: 'Target Dataset', alignment: 'left'},\n        {name: 'state', title: 'State', alignment: 'left'},\n        {name: 'withHistory', title: 'With history', alignment: 'left'},\n        {name: 'timeStarted', title: 'Time started', alignment: 'left'},\n        {name: 'timeTaken', title: 'Time taken', alignment: 'left'},\n      ],\n    })\n\n    response.forEach((job) => {\n      const {id, state, createdAt, updatedAt, sourceDataset, targetDataset, withHistory} = job\n\n      let timeStarted = ''\n      if (createdAt !== '') {\n        timeStarted = formatDistanceToNow(parseISO(createdAt))\n      }\n\n      let timeTaken = ''\n      if (updatedAt !== '') {\n        timeTaken = formatDistance(parseISO(updatedAt), parseISO(createdAt))\n      }\n\n      let color\n      switch (state) {\n        case 'completed':\n          color = 'green'\n          break\n        case 'failed':\n          color = 'red'\n          break\n        case 'pending':\n          color = 'yellow'\n          break\n        default:\n          color = ''\n      }\n\n      table.addRow(\n        {\n          id,\n          state,\n          withHistory,\n          timeStarted: `${timeStarted} ago`,\n          timeTaken,\n          sourceDataset,\n          targetDataset,\n        },\n        {color},\n      )\n    })\n\n    table.printTable()\n  } else {\n    output.print(\"This project doesn't have any dataset copy jobs\")\n  }\n}\n","import {type SanityClient} from '@sanity/client'\n\nexport const getClientUrl = (client: SanityClient, uri: string, useCdn = false): string => {\n  const config = client.config()\n  const base = useCdn ? config.cdnUrl : config.url\n  return `${base}/${uri.replace(/^\\//, '')}`\n}\n","import {type CliCommandDefinition, type CliOutputter} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport EventSource from '@sanity/eventsource'\nimport {Observable} from 'rxjs'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {listDatasetCopyJobs} from '../../actions/dataset/listDatasetCopyJobs'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\nimport {getClientUrl} from '../../util/getClientUrl'\n\nconst helpText = `\nOptions\n  --detach Start the copy without waiting for it to finish\n  --attach <job-id> Attach to the running copy process to show progress\n  --skip-history Don't preserve document history on copy\n  --list Lists all dataset copy jobs corresponding to a certain criteria.\n  --offset Start position in the list of jobs. Default 0. With --list.\n  --limit Maximum number of jobs returned. Default 10. Maximum 1000. With --list.\n\nExamples\n  sanity dataset copy\n  sanity dataset copy <source-dataset>\n  sanity dataset copy <source-dataset> <target-dataset>\n  sanity dataset copy --skip-history <source-dataset> <target-dataset>\n  sanity dataset copy --detach <source-dataset> <target-dataset>\n  sanity dataset copy --attach <job-id>\n  sanity dataset copy --list\n  sanity dataset copy --list --offset=2\n  sanity dataset copy --list --offset=2 --limit=10\n`\n\ninterface CopyProgressStreamEvent {\n  type: 'reconnect' | string\n  progress?: number\n}\n\ninterface CopyDatasetFlags {\n  'list'?: boolean\n  'attach'?: string\n  'detach'?: boolean\n  'offset'?: number\n  'limit'?: number\n  'skip-history'?: boolean\n}\n\ninterface CopyDatasetResponse {\n  jobId: string\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('attach', {type: 'string'})\n    .option('list', {type: 'boolean'})\n    .option('limit', {type: 'number'})\n    .option('offset', {type: 'number'})\n    .option('skip-history', {type: 'boolean'})\n    .option('detach', {type: 'boolean'}).argv\n}\n\nconst progress = (url: string) => {\n  return new Observable<CopyProgressStreamEvent>((observer) => {\n    let progressSource = new EventSource(url)\n    let stopped = false\n\n    function onError(error: unknown) {\n      if (progressSource) {\n        progressSource.close()\n      }\n\n      debug(`Error received: ${error}`)\n      if (stopped) {\n        return\n      }\n      observer.next({type: 'reconnect'})\n      progressSource = new EventSource(url)\n    }\n\n    function onChannelError(error: MessageEvent) {\n      stopped = true\n      progressSource.close()\n      observer.error(error)\n    }\n\n    function onMessage(event: MessageEvent) {\n      const data = JSON.parse(event.data)\n      if (data.state === 'failed') {\n        debug('Job failed. Data: %o', event)\n        observer.error(event)\n      } else if (data.state === 'completed') {\n        debug('Job succeeded. Data: %o', event)\n        onComplete()\n      } else {\n        debug(`Job progressed. Data: %o`, event)\n        observer.next(data)\n      }\n    }\n\n    function onComplete() {\n      progressSource.removeEventListener('error', onError)\n      progressSource.removeEventListener('channel_error', onChannelError)\n      progressSource.removeEventListener('job', onMessage)\n      progressSource.removeEventListener('done', onComplete)\n      progressSource.close()\n      observer.complete()\n    }\n\n    progressSource.addEventListener('error', onError)\n    progressSource.addEventListener('channel_error', onChannelError)\n    progressSource.addEventListener('job', onMessage)\n    progressSource.addEventListener('done', onComplete)\n  })\n}\n\nconst followProgress = (\n  jobId: string,\n  client: SanityClient,\n  output: CliOutputter,\n): Promise<void> => {\n  let currentProgress = 0\n\n  const spinner = output.spinner({}).start()\n  const listenUrl = getClientUrl(client, `jobs/${jobId}/listen`)\n\n  debug(`Listening to ${listenUrl}`)\n\n  return new Promise((resolve, reject) => {\n    progress(listenUrl).subscribe({\n      next: (event) => {\n        if (typeof event.progress === 'number') {\n          currentProgress = event.progress\n        }\n\n        spinner.text = `Copy in progress: ${currentProgress}%`\n      },\n      error: (err) => {\n        spinner.fail()\n        reject(new Error(`${err.data}`))\n      },\n      complete: () => {\n        spinner.succeed('Copy finished.')\n        resolve()\n      },\n    })\n  })\n}\n\nconst copyDatasetCommand: CliCommandDefinition<CopyDatasetFlags> = {\n  name: 'copy',\n  group: 'dataset',\n  signature: '[SOURCE_DATASET] [TARGET_DATASET]',\n  helpText,\n  description:\n    'Manages dataset copying, including starting a new copy job, listing copy jobs and following the progress of a running copy job',\n  action: async (args, context) => {\n    const {apiClient, output, prompt, chalk} = context\n    // Reparsing CLI flags for better control of binary flags\n    const flags: CopyDatasetFlags = await parseCliFlags(args)\n    const client = apiClient()\n\n    if (flags.list) {\n      await listDatasetCopyJobs(flags, context)\n      return\n    }\n\n    if (flags.attach) {\n      const jobId = flags.attach\n\n      if (!jobId) {\n        throw new Error('Please supply a jobId')\n      }\n\n      await followProgress(jobId, client, output)\n      return\n    }\n\n    const [sourceDataset, targetDataset] = args.argsWithoutOptions\n    const shouldSkipHistory = Boolean(flags['skip-history'])\n\n    const nameError = sourceDataset && validateDatasetName(sourceDataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const existingDatasets = await client.datasets\n      .list()\n      .then((datasets) => datasets.map((ds) => ds.name))\n\n    const sourceDatasetName = await (sourceDataset ||\n      promptForDatasetName(prompt, {message: 'Source dataset name:'}))\n    if (!existingDatasets.includes(sourceDatasetName)) {\n      throw new Error(`Source dataset \"${sourceDatasetName}\" doesn't exist`)\n    }\n\n    const targetDatasetName = await (targetDataset ||\n      promptForDatasetName(prompt, {message: 'Target dataset name:'}))\n    if (existingDatasets.includes(targetDatasetName)) {\n      throw new Error(`Target dataset \"${targetDatasetName}\" already exists`)\n    }\n\n    const err = validateDatasetName(targetDatasetName)\n    if (err) {\n      throw new Error(err)\n    }\n\n    try {\n      const response = await client.request<CopyDatasetResponse>({\n        method: 'PUT',\n        uri: `/datasets/${sourceDatasetName}/copy`,\n        body: {\n          targetDataset: targetDatasetName,\n          skipHistory: shouldSkipHistory,\n        },\n      })\n\n      output.print(\n        `Copying dataset ${chalk.green(sourceDatasetName)} to ${chalk.green(targetDatasetName)}...`,\n      )\n\n      if (!shouldSkipHistory) {\n        output.print(\n          `Note: You can run this command with flag '--skip-history'. The flag will reduce copy time in larger datasets.`,\n        )\n      }\n\n      output.print(`Job ${chalk.green(response.jobId)} started`)\n\n      if (flags.detach) {\n        return\n      }\n\n      await followProgress(response.jobId, client, output)\n      output.print(`Job ${chalk.green(response.jobId)} completed`)\n    } catch (error) {\n      if (error.statusCode) {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.response.body.message}`)}\\n`)\n      } else {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.message}`)}\\n`)\n      }\n    }\n  },\n}\n\nexport default copyDatasetCommand\n","import {type CliCommandDefinition, type CliOutputter, type CliPrompter} from '@sanity/cli'\n\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst helpText = `\nOptions\n  --visibility <mode> Set visibility for this dataset (public/private)\n\nExamples\n  sanity dataset create\n  sanity dataset create <name>\n  sanity dataset create <name> --visibility private\n`\n\nconst allowedModes = ['private', 'public', 'custom']\n\ninterface CreateFlags {\n  visibility?: 'private' | 'public' | 'custom'\n}\n\nconst createDatasetCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'dataset',\n  signature: '[NAME]',\n  helpText,\n  description: 'Create a new dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const flags = args.extOptions\n    const [dataset] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const nameError = dataset && validateDatasetName(dataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const [datasets, projectFeatures] = await Promise.all([\n      client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n      client.request({uri: '/features'}),\n    ])\n\n    if (flags.visibility && !allowedModes.includes(flags.visibility)) {\n      throw new Error(`Visibility mode \"${flags.visibility}\" not allowed`)\n    }\n\n    const datasetName = await (dataset || promptForDatasetName(prompt))\n    if (datasets.includes(datasetName)) {\n      throw new Error(`Dataset \"${datasetName}\" already exists`)\n    }\n\n    const canCreatePrivate = projectFeatures.includes('privateDataset')\n    debug('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot')\n\n    const defaultAclMode = canCreatePrivate ? flags.visibility : 'public'\n    const aclMode = await (defaultAclMode || promptForDatasetVisibility(prompt, output))\n\n    try {\n      await client.datasets.create(datasetName, {aclMode})\n      output.print('Dataset created successfully')\n    } catch (err) {\n      throw new Error(`Dataset creation failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForDatasetVisibility(prompt: CliPrompter, output: CliOutputter) {\n  const mode = await prompt.single<'public' | 'private'>({\n    type: 'list',\n    message: 'Dataset visibility',\n    choices: [\n      {\n        value: 'public',\n        name: 'Public (world readable)',\n      },\n      {\n        value: 'private',\n        name: 'Private (Authenticated user or token needed)',\n      },\n    ],\n  })\n\n  if (mode === 'private') {\n    output.print(\n      'Please note that while documents are private, assets (files and images) are still public\\n',\n    )\n  }\n\n  return mode\n}\n\nexport default createDatasetCommand\n","export default {\n  name: 'dataset',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages datasets, like create or delete, within projects',\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst datasetVisibilityCommand: CliCommandDefinition = {\n  name: 'visibility',\n  group: 'dataset',\n  helpText: '',\n  signature: 'get/set [dataset] [mode]',\n  description: 'Set visibility of a dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [action, ds, aclMode] = args.argsWithoutOptions\n    const client = apiClient()\n\n    if (!client.datasets.edit) {\n      throw new Error('@sanity/cli must be upgraded first:\\n  npm install -g @sanity/cli')\n    }\n\n    if (!action) {\n      throw new Error('Action must be provided (get/set)')\n    }\n\n    if (!['set', 'get'].includes(action)) {\n      throw new Error('Invalid action (only get/set allowed)')\n    }\n\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    if (action === 'set' && !aclMode) {\n      throw new Error('Please provide a visibility mode (public/private)')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n\n    const current = (await client.datasets.list()).find((curr) => curr.name === dataset)\n\n    if (!current) {\n      throw new Error('Dataset not found')\n    }\n\n    if (action === 'get') {\n      output.print(current.aclMode)\n      return\n    }\n\n    if (current.aclMode === aclMode) {\n      output.print(`Dataset already in \"${aclMode}\"-mode`)\n      return\n    }\n\n    if (aclMode === 'private') {\n      output.print(\n        'Please note that while documents are private, assets (files and images) are still public\\n',\n      )\n    }\n\n    await client.datasets.edit(dataset, {aclMode: aclMode as 'public' | 'private'})\n    output.print('Dataset visibility changed')\n  },\n}\n\nexport default datasetVisibilityCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst helpText = `\nOptions\n  --force Do not prompt for delete confirmation - forcefully delete\n\nExamples\n  sanity dataset delete\n  sanity dataset delete my-dataset\n  sanity dataset delete my-dataset --force\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\ninterface DeleteDatasetFlags {\n  force?: boolean\n}\n\nconst deleteDatasetCommand: CliCommandDefinition<DeleteDatasetFlags> = {\n  name: 'delete',\n  group: 'dataset',\n  helpText,\n  signature: '[datasetName]',\n  description: 'Delete a dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, prompt, output} = context\n    const {force} = await parseCliFlags(args)\n    const [ds] = args.argsWithoutOptions\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    if (force) {\n      output.warn(`'--force' used: skipping confirmation, deleting dataset \"${dataset}\"`)\n    } else {\n      await prompt.single({\n        type: 'input',\n        message:\n          'Are you ABSOLUTELY sure you want to delete this dataset?\\n  Type the name of the dataset to confirm delete:',\n        filter: (input) => `${input}`.trim(),\n        validate: (input) => {\n          return input === dataset || 'Incorrect dataset name. Ctrl + C to cancel delete.'\n        },\n      })\n    }\n\n    await apiClient().datasets.delete(dataset)\n    output.print('Dataset deleted successfully')\n  },\n}\n\nexport default deleteDatasetCommand\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition, type CliPrompter} from '@sanity/cli'\nimport exportDataset from '@sanity/export'\nimport {absolutify} from '@sanity/util/fs'\nimport prettyMs from 'pretty-ms'\n\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst noop = () => null\n\nconst helpText = `\nOptions\n  --raw                     Extract only documents, without rewriting asset references\n  --no-assets               Export only non-asset documents and remove references to image assets\n  --no-drafts               Export only published versions of documents\n  --no-compress             Skips compressing tarball entries (still generates a gzip file)\n  --types                   Defines which document types to export\n  --overwrite               Overwrite any file with the same name\n  --asset-concurrency <num> Concurrent number of asset downloads\n  --mode <stream|cursor>    Uses a cursor when exporting, this might be more performant for larger datasets, but might not be as accurate if the dataset is being modified during export. Defaults to stream\n\nExamples\n  sanity dataset export moviedb localPath.tar.gz\n  sanity dataset export moviedb assetless.tar.gz --no-assets\n  sanity dataset export staging staging.tar.gz --raw\n  sanity dataset export staging staging.tar.gz --types products,shops\n`\n\ninterface ExportFlags {\n  'raw'?: boolean\n  'assets'?: boolean\n  'drafts'?: boolean\n  'compress'?: boolean\n  'overwrite'?: boolean\n  'types'?: string\n  'asset-concurrency'?: string\n  'mode'?: string\n}\n\ninterface ParsedExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string[]\n  assetConcurrency?: number\n  mode?: string\n}\n\nfunction parseFlags(rawFlags: ExportFlags): ParsedExportFlags {\n  const flags: ParsedExportFlags = {}\n  if (rawFlags.types) {\n    flags.types = `${rawFlags.types}`.split(',')\n  }\n\n  if (rawFlags['asset-concurrency']) {\n    flags.assetConcurrency = parseInt(rawFlags['asset-concurrency'], 10)\n  }\n\n  if (typeof rawFlags.raw !== 'undefined') {\n    flags.raw = Boolean(rawFlags.raw)\n  }\n\n  if (typeof rawFlags.assets !== 'undefined') {\n    flags.assets = Boolean(rawFlags.assets)\n  }\n\n  if (typeof rawFlags.drafts !== 'undefined') {\n    flags.drafts = Boolean(rawFlags.drafts)\n  }\n\n  if (typeof rawFlags.compress !== 'undefined') {\n    flags.compress = Boolean(rawFlags.compress)\n  }\n\n  if (typeof rawFlags.overwrite !== 'undefined') {\n    flags.overwrite = Boolean(rawFlags.overwrite)\n  }\n\n  if (typeof rawFlags.mode !== 'undefined') {\n    flags.mode = rawFlags.mode\n  }\n\n  return flags\n}\n\ninterface ProgressEvent {\n  step: string\n  update?: boolean\n  current: number\n  total: number\n}\n\nconst exportDatasetCommand: CliCommandDefinition<ExportFlags> = {\n  name: 'export',\n  group: 'dataset',\n  signature: '[NAME] [DESTINATION]',\n  description: 'Export dataset to local filesystem as a gzipped tarball',\n  helpText,\n  action: async (args, context) => {\n    const {apiClient, output, chalk, workDir, prompt} = context\n    const client = apiClient()\n    const [targetDataset, targetDestination] = args.argsWithoutOptions\n    const flags = parseFlags(args.extOptions)\n\n    let dataset = targetDataset ? `${targetDataset}` : null\n    if (!dataset) {\n      dataset = await chooseDatasetPrompt(context, {message: 'Select dataset to export'})\n    }\n\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    // Verify existence of dataset before trying to export from it\n    const datasets = await client.datasets.list()\n    if (!datasets.find((set) => set.name === dataset)) {\n      throw new Error(`Dataset with name \"${dataset}\" not found`)\n    }\n\n    // Print information about what projectId and dataset it is being exported from\n    const {projectId} = client.config()\n\n    output.print('╭───────────────────────────────────────────────╮')\n    output.print('│                                               │')\n    output.print('│ Exporting from:                               │')\n    output.print(`│ ${chalk.bold('projectId')}: ${chalk.cyan(projectId).padEnd(44)} │`)\n    output.print(`│ ${chalk.bold('dataset')}: ${chalk.cyan(dataset).padEnd(46)} │`)\n    output.print('│                                               │')\n    output.print('╰───────────────────────────────────────────────╯')\n    output.print('')\n\n    let destinationPath = targetDestination\n    if (!destinationPath) {\n      destinationPath = await prompt.single({\n        type: 'input',\n        message: 'Output path:',\n        default: path.join(workDir, `${dataset}.tar.gz`),\n        filter: absolutify,\n      })\n    }\n\n    const outputPath = await getOutputPath(destinationPath, dataset, prompt, flags)\n    if (!outputPath) {\n      output.print('Cancelled')\n      return\n    }\n\n    // If we are dumping to a file, let the user know where it's at\n    if (outputPath !== '-') {\n      output.print(`Exporting dataset \"${chalk.cyan(dataset)}\" to \"${chalk.cyan(outputPath)}\"`)\n    }\n\n    let currentStep = 'Exporting documents...'\n    let spinner = output.spinner(currentStep).start()\n    const onProgress = (progress: ProgressEvent) => {\n      if (progress.step !== currentStep) {\n        spinner.succeed()\n        spinner = output.spinner(progress.step).start()\n      } else if (progress.step === currentStep && progress.update) {\n        spinner.text = `${progress.step} (${progress.current}/${progress.total})`\n      }\n\n      currentStep = progress.step\n    }\n\n    const start = Date.now()\n    try {\n      await exportDataset({\n        client,\n        dataset,\n        outputPath,\n        onProgress,\n        ...flags,\n      })\n      spinner.succeed()\n    } catch (err) {\n      spinner.fail()\n      throw err\n    }\n\n    output.print(`Export finished (${prettyMs(Date.now() - start)})`)\n  },\n}\n\n// eslint-disable-next-line complexity\nasync function getOutputPath(\n  destination: string,\n  dataset: string,\n  prompt: CliPrompter,\n  flags: ParsedExportFlags,\n) {\n  if (destination === '-') {\n    return '-'\n  }\n\n  const dstPath = path.isAbsolute(destination)\n    ? destination\n    : path.resolve(process.cwd(), destination)\n\n  let dstStats = await fs.stat(dstPath).catch(noop)\n  const looksLikeFile = dstStats ? dstStats.isFile() : path.basename(dstPath).indexOf('.') !== -1\n\n  if (!dstStats) {\n    const createPath = looksLikeFile ? path.dirname(dstPath) : dstPath\n\n    await fs.mkdir(createPath, {recursive: true})\n  }\n\n  const finalPath = looksLikeFile ? dstPath : path.join(dstPath, `${dataset}.tar.gz`)\n  dstStats = await fs.stat(finalPath).catch(noop)\n\n  if (!flags.overwrite && dstStats && dstStats.isFile()) {\n    const shouldOverwrite = await prompt.single({\n      type: 'confirm',\n      message: `File \"${finalPath}\" already exists, would you like to overwrite it?`,\n      default: false,\n    })\n\n    if (!shouldOverwrite) {\n      return false\n    }\n  }\n\n  return finalPath\n}\n\nexport default exportDatasetCommand\n","import {createReadStream} from 'node:fs'\nimport fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandContext, type CliCommandDefinition, type CliOutputter} from '@sanity/cli'\nimport sanityImport from '@sanity/import'\nimport {getIt} from 'get-it'\n// eslint-disable-next-line import/extensions\nimport {promise} from 'get-it/middleware'\nimport {padStart} from 'lodash'\nimport prettyMs from 'pretty-ms'\n\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst yellow = (str: string) => `\\u001b[33m${str}\\u001b[39m`\n\nconst helpText = `\nOptions\n  --missing On duplicate document IDs, skip importing document in question\n  --replace On duplicate document IDs, replace existing document with imported document\n  --allow-failing-assets Skip assets that cannot be fetched/uploaded\n  --replace-assets Skip reuse of existing assets\n  --skip-cross-dataset-references Skips references to other datasets\n\nRarely used options (should generally not be used)\n  --allow-assets-in-different-dataset Allow asset documents to reference different project/dataset\n  --allow-system-documents Allow system documents like dataset permissions and custom retention to be imported\n\nExamples\n  # Import \"moviedb.ndjson\" from the current directory to the dataset called \"moviedb\"\n  sanity dataset import moviedb.ndjson moviedb\n\n  # Import \"moviedb.tar.gz\" from the current directory to the dataset called \"moviedb\",\n  # replacing any documents encountered that have the same document IDs\n  sanity dataset import moviedb.tar.gz moviedb --replace\n\n  # Import from a folder containing an ndjson file, such as an extracted tarball\n  # retrieved through \"sanity dataset export\".\n  sanity dataset import ~/some/folder moviedb\n\n  # Import from a remote URL. Will download and extract the tarball to a temporary\n  # location before importing it.\n  sanity dataset import https://some.url/moviedb.tar.gz moviedb --replace\n`\n\ninterface ImportFlags {\n  'allow-assets-in-different-dataset'?: boolean\n  'allow-failing-assets'?: boolean\n  'asset-concurrency'?: boolean\n  'replace-assets'?: boolean\n  'skip-cross-dataset-references'?: boolean\n  'allow-system-documents'?: boolean\n  'replace'?: boolean\n  'missing'?: boolean\n}\n\ninterface ParsedImportFlags {\n  allowAssetsInDifferentDataset?: boolean\n  allowFailingAssets?: boolean\n  assetConcurrency?: boolean\n  skipCrossDatasetReferences?: boolean\n  allowSystemDocuments?: boolean\n  replaceAssets?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ProgressEvent {\n  step: string\n  total?: number\n  current?: number\n}\n\ninterface ImportWarning {\n  type?: string\n  url?: string\n}\n\nfunction toBoolIfSet(flag: unknown): boolean | undefined {\n  return typeof flag === 'undefined' ? undefined : Boolean(flag)\n}\n\nfunction parseFlags(rawFlags: ImportFlags): ParsedImportFlags {\n  const allowAssetsInDifferentDataset = toBoolIfSet(rawFlags['allow-assets-in-different-dataset'])\n  const allowFailingAssets = toBoolIfSet(rawFlags['allow-failing-assets'])\n  const assetConcurrency = toBoolIfSet(rawFlags['asset-concurrency'])\n  const replaceAssets = toBoolIfSet(rawFlags['replace-assets'])\n  const skipCrossDatasetReferences = toBoolIfSet(rawFlags['skip-cross-dataset-references'])\n  const allowSystemDocuments = toBoolIfSet(rawFlags['allow-system-documents'])\n  const replace = toBoolIfSet(rawFlags.replace)\n  const missing = toBoolIfSet(rawFlags.missing)\n  return {\n    allowAssetsInDifferentDataset,\n    allowFailingAssets,\n    assetConcurrency,\n    skipCrossDatasetReferences,\n    allowSystemDocuments,\n    replaceAssets,\n    replace,\n    missing,\n  }\n}\n\nconst importDatasetCommand: CliCommandDefinition = {\n  name: 'import',\n  group: 'dataset',\n  signature: '[FILE | FOLDER | URL] [TARGET_DATASET]',\n  description: 'Import documents to given dataset from either an ndjson file or a gzipped tarball',\n  helpText,\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {apiClient, output, chalk, fromInitCommand} = context\n    const flags = parseFlags(args.extOptions)\n    const {\n      allowAssetsInDifferentDataset,\n      allowFailingAssets,\n      assetConcurrency,\n      skipCrossDatasetReferences,\n      allowSystemDocuments,\n      replaceAssets,\n    } = flags\n\n    const operation = getMutationOperation(args.extOptions)\n    const client = apiClient()\n\n    const [file, target] = args.argsWithoutOptions\n    if (!file) {\n      throw new Error(\n        `Source file name and target dataset must be specified (\"sanity dataset import ${chalk.bold(\n          '[file]',\n        )} [dataset]\")`,\n      )\n    }\n\n    const targetDataset = await determineTargetDataset(target, context)\n    debug(`Target dataset has been set to \"${targetDataset}\"`)\n\n    const isUrl = /^https?:\\/\\//i.test(file)\n    let inputStream\n    let assetsBase\n    let sourceIsFolder = false\n\n    if (isUrl) {\n      debug('Input is a URL, streaming from source URL')\n      inputStream = await getUrlStream(file)\n    } else {\n      const sourceFile = path.resolve(process.cwd(), file)\n      const fileStats = await fs.stat(sourceFile).catch(() => null)\n      if (!fileStats) {\n        throw new Error(`${sourceFile} does not exist or is not readable`)\n      }\n\n      sourceIsFolder = fileStats.isDirectory()\n      if (sourceIsFolder) {\n        inputStream = sourceFile\n      } else {\n        assetsBase = path.dirname(sourceFile)\n        inputStream = await createReadStream(sourceFile)\n      }\n    }\n\n    const importClient = client.clone().config({dataset: targetDataset})\n\n    // Print information about what projectId and dataset it is being imported to\n    const {projectId, dataset} = importClient.config()\n\n    output.print('╭───────────────────────────────────────────────╮')\n    output.print('│                                               │')\n    output.print('│ Importing to:                                 │')\n    output.print(`│ ${chalk.bold('projectId')}: ${chalk.cyan(projectId).padEnd(44)} │`)\n    output.print(`│ ${chalk.bold('dataset')}: ${chalk.cyan(dataset).padEnd(46)} │`)\n    output.print('│                                               │')\n    output.print('╰───────────────────────────────────────────────╯')\n    output.print('')\n\n    let currentStep: string | undefined\n    let currentProgress: ReturnType<CliOutputter['spinner']> | undefined\n    let stepStart: number | undefined\n    let spinInterval: ReturnType<typeof setInterval> | null = null\n    let percent: string | undefined\n\n    function onProgress(opts: ProgressEvent) {\n      const lengthComputable = opts.total\n      const sameStep = opts.step == currentStep\n      percent = getPercentage(opts)\n\n      if (lengthComputable && opts.total === opts.current) {\n        if (spinInterval) {\n          clearInterval(spinInterval)\n        }\n        spinInterval = null\n      }\n\n      if (sameStep) {\n        return\n      }\n\n      // Moved to a new step\n      const prevStep = currentStep\n      const prevStepStart = stepStart || Date.now()\n      stepStart = Date.now()\n      currentStep = opts.step\n\n      if (currentProgress && currentProgress.succeed) {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${prevStep} (${timeSpent})`\n        currentProgress.succeed()\n      }\n\n      currentProgress = output.spinner(`[0%] ${opts.step} (0.00s)`).start()\n\n      if (spinInterval) {\n        clearInterval(spinInterval)\n        spinInterval = null\n      }\n\n      spinInterval = setInterval(() => {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n\n        if (currentProgress) {\n          currentProgress.text = `${percent}${opts.step} (${timeSpent})`\n        }\n      }, 60)\n    }\n\n    function endTask({success}: {success: boolean}) {\n      if (spinInterval) {\n        clearInterval(spinInterval)\n      }\n\n      spinInterval = null\n\n      if (success && stepStart && currentProgress) {\n        const timeSpent = prettyMs(Date.now() - stepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${currentStep} (${timeSpent})`\n        currentProgress.succeed()\n      } else if (currentProgress) {\n        currentProgress.fail()\n      }\n    }\n\n    // Start the import!\n    try {\n      const {numDocs, warnings} = await sanityImport(inputStream, {\n        client: importClient,\n        assetsBase,\n        operation,\n        onProgress,\n        allowFailingAssets,\n        allowAssetsInDifferentDataset,\n        skipCrossDatasetReferences,\n        allowSystemDocuments,\n        assetConcurrency,\n        replaceAssets,\n      })\n\n      endTask({success: true})\n\n      output.print('Done! Imported %d documents to dataset \"%s\"\\n', numDocs, targetDataset)\n      printWarnings(warnings, output)\n    } catch (err) {\n      endTask({success: false})\n\n      const isNonRefConflict =\n        !fromInitCommand &&\n        err.response &&\n        err.response.statusCode === 409 &&\n        err.step !== 'strengthen-references'\n\n      if (!isNonRefConflict) {\n        throw err\n      }\n\n      const message = [\n        err.message,\n        '',\n        'You probably want either:',\n        ' --replace (replace existing documents with same IDs)',\n        ' --missing (only import documents that do not already exist)',\n        '',\n      ].join('\\n')\n\n      // @todo SUBCLASS ERROR?\n      const error = new Error(message) as any\n      error.details = err.details\n      error.response = err.response\n      error.responseBody = err.responseBody\n\n      throw error\n    }\n  },\n}\n\nasync function determineTargetDataset(target: string, context: CliCommandContext) {\n  const {apiClient, output, prompt} = context\n  const client = apiClient()\n\n  if (target) {\n    const dsError = validateDatasetName(target)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n  }\n\n  debug('Fetching available datasets')\n  const spinner = output.spinner('Fetching available datasets').start()\n  const datasets = await client.datasets.list()\n  spinner.succeed('[100%] Fetching available datasets')\n\n  let targetDataset = target ? `${target}` : null\n  if (!targetDataset) {\n    targetDataset = await chooseDatasetPrompt(context, {\n      message: 'Select target dataset',\n      allowCreation: true,\n    })\n  } else if (!datasets.find((dataset) => dataset.name === targetDataset)) {\n    debug('Target dataset does not exist, prompting for creation')\n    const shouldCreate = await prompt.single({\n      type: 'confirm',\n      message: `Dataset \"${targetDataset}\" does not exist, would you like to create it?`,\n      default: true,\n    })\n\n    if (!shouldCreate) {\n      throw new Error(`Dataset \"${targetDataset}\" does not exist`)\n    }\n\n    await client.datasets.create(targetDataset)\n  }\n\n  return targetDataset\n}\n\nfunction getMutationOperation(flags: ParsedImportFlags) {\n  const {replace, missing} = flags\n  if (replace && missing) {\n    throw new Error('Cannot use both --replace and --missing')\n  }\n\n  if (flags.replace) {\n    return 'createOrReplace'\n  }\n\n  if (flags.missing) {\n    return 'createIfNotExists'\n  }\n\n  return 'create'\n}\n\nfunction getPercentage(opts: ProgressEvent) {\n  if (!opts.total || typeof opts.current === 'undefined') {\n    return ''\n  }\n\n  const percent = Math.floor((opts.current / opts.total) * 100)\n  return `[${padStart(`${percent}`, 3, ' ')}%] `\n}\n\nfunction getUrlStream(url: string) {\n  const request = getIt([promise({onlyBody: true})])\n  return request({url, stream: true})\n}\n\nfunction printWarnings(warnings: ImportWarning[], output: CliOutputter) {\n  const assetFails = warnings.filter((warn) => warn.type === 'asset')\n\n  if (!assetFails.length) {\n    return\n  }\n\n  const warn = (output.warn || output.print).bind(output)\n\n  warn(yellow('⚠ Failed to import the following %s:'), assetFails.length > 1 ? 'assets' : 'asset')\n\n  warnings.forEach((warning) => {\n    warn(`  ${warning.url}`)\n  })\n}\n\nexport default importDatasetCommand\n","import {type CliCommandAction} from '@sanity/cli'\n\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const listAliasesHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output} = context\n  const client = apiClient()\n\n  const aliases = await aliasClient.listAliases(client)\n  output.print(\n    aliases\n      .map((set) => `${ALIAS_PREFIX}${set.name} -> ${set.datasetName || '<unlinked>'}`)\n      .join('\\n'),\n  )\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {listAliasesHandler} from './alias/listAliasesHandler'\n\nconst listDatasetsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'dataset',\n  helpText: '',\n  signature: '',\n  description: 'List datasets of your project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n    const datasets = await client.datasets.list()\n    output.print(datasets.map((set) => set.name).join('\\n'))\n\n    // Print alias list\n    await listAliasesHandler(args, context)\n  },\n}\n\nexport default listDatasetsCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type DeployStudioActionFlags} from '../../actions/deploy/deployAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --auto-updates / --no-auto-updates Enable/disable auto updates of studio versions\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  --no-build Don't build the studio prior to deploy, instead deploying the version currently in \\`dist/\\`\n  -y, --yes Unattended mode, answers \"yes\" to any \"yes/no\" prompt and otherwise uses defaults\n\nExamples\n  sanity deploy\n  sanity deploy --no-minify --source-maps\n`\n\nconst deployCommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '[SOURCE_DIR] [--no-build] [--source-maps] [--no-minify]',\n  description: 'Builds and deploys Sanity Studio to Sanity hosting',\n  action: async (\n    args: CliCommandArguments<DeployStudioActionFlags>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/deploy/deployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity undeploy\n`\n\nconst undeployCommand: CliCommandDefinition = {\n  name: 'undeploy',\n  signature: '',\n  description: 'Removes the deployed Sanity Studio from Sanity hosting',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/deploy/undeployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default undeployCommand\n","import fs from 'node:fs/promises'\nimport os from 'node:os'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\nimport {\n  type IdentifiedSanityDocumentStub,\n  type MultipleMutationResult,\n  type Mutation,\n  type SanityClient,\n} from '@sanity/client'\nimport {uuid} from '@sanity/uuid'\nimport chokidar from 'chokidar'\nimport execa from 'execa'\nimport json5 from 'json5'\nimport {isEqual, isPlainObject, noop} from 'lodash'\n\ntype MutationOperationName = 'create' | 'createOrReplace' | 'createIfNotExists'\n\ninterface CreateFlags {\n  dataset?: string\n  replace?: boolean\n  missing?: boolean\n  watch?: boolean\n  json5?: boolean\n  id?: string\n}\n\nconst helpText = `\nOptions\n  --replace On duplicate document IDs, replace existing document with specified document(s)\n  --missing On duplicate document IDs, don't modify the target document(s)\n  --watch   Write the documents whenever the target file or buffer changes\n  --json5   Use JSON5 file type to allow a \"simplified\" version of JSON\n  --id <id> Specify a document ID to use. Will fetch remote document ID and populate editor.\n  --dataset NAME to override dataset\n\nExamples\n  # Create the document specified in \"myDocument.json\".\n  sanity documents create myDocument.json\n\n  # Open configured $EDITOR and create the specified document(s)\n  sanity documents create\n\n  # Fetch document with the ID \"myDocId\" and open configured $EDITOR with the\n  # current document content (if any). Replace document with the edited version\n  # when the editor closes\n  sanity documents create --id myDocId --replace\n\n  # Open configured $EDITOR and replace the document with the given content\n  # on each save. Use JSON5 file extension and parser for simplified syntax.\n  sanity documents create --id myDocId --watch --replace --json5\n`\n\nconst createDocumentsCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'documents',\n  signature: '[FILE]',\n  helpText,\n  description: 'Create one or more documents',\n  // eslint-disable-next-line complexity\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const {replace, missing, watch, id, dataset} = args.extOptions\n    const [file] = args.argsWithoutOptions\n    const useJson5 = args.extOptions.json5\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    if (replace && missing) {\n      throw new Error('Cannot use both --replace and --missing')\n    }\n\n    if (id && file) {\n      throw new Error('Cannot use --id when specifying a file path')\n    }\n\n    let operation: MutationOperationName = 'create'\n    if (replace || missing) {\n      operation = replace ? 'createOrReplace' : 'createIfNotExists'\n    }\n\n    if (file) {\n      const contentPath = path.resolve(process.cwd(), file)\n      const content = json5.parse(await fs.readFile(contentPath, 'utf8'))\n      const result = await writeDocuments(content, operation, client)\n      output.print(getResultMessage(result, operation))\n      return\n    }\n\n    // Create a temporary file and use that as source, opening an editor on it\n    const docId = id || uuid()\n    const ext = useJson5 ? 'json5' : 'json'\n    const tmpFile = path.join(os.tmpdir(), 'sanity-cli', `${docId}.${ext}`)\n    const stringify = useJson5 ? json5.stringify : JSON.stringify\n    const defaultValue = (id && (await client.getDocument(id))) || {_id: docId, _type: 'specify-me'}\n    await fs.mkdir(path.join(os.tmpdir(), 'sanity-cli'), {recursive: true})\n    await fs.writeFile(tmpFile, stringify(defaultValue, null, 2), 'utf8')\n\n    const editor = getEditor()\n    if (watch) {\n      // If we're in watch mode, we want to run the creation on each change (if it validates)\n      registerUnlinkOnSigInt(tmpFile)\n      output.print(`Watch mode: ${tmpFile}`)\n      output.print('Watch mode: Will write documents on each save.')\n      output.print('Watch mode: Press Ctrl + C to cancel watch mode.')\n      chokidar.watch(tmpFile).on('change', () => {\n        output.print('')\n        return readAndPerformCreatesFromFile(tmpFile)\n      })\n      execa(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n    } else {\n      // While in normal mode, we just want to wait for the editor to close and run the thing once\n      execa.sync(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n      await readAndPerformCreatesFromFile(tmpFile)\n      await fs.unlink(tmpFile).catch(noop)\n    }\n\n    async function readAndPerformCreatesFromFile(filePath: string) {\n      let content\n      try {\n        content = json5.parse(await fs.readFile(filePath, 'utf8'))\n      } catch (err) {\n        output.error(`Failed to read input: ${err.message}`)\n        return\n      }\n\n      if (isEqual(content, defaultValue)) {\n        output.print('Value not modified, doing nothing.')\n        output.print('Modify document to trigger creation.')\n        return\n      }\n\n      try {\n        const writeResult = await writeDocuments(content, operation, client)\n        output.print(getResultMessage(writeResult, operation))\n      } catch (err) {\n        output.error(`Failed to write documents: ${err.message}`)\n        if (err.message.includes('already exists')) {\n          output.error('Perhaps you want to use `--replace` or `--missing`?')\n        }\n      }\n    }\n  },\n}\n\nfunction registerUnlinkOnSigInt(tmpFile: string) {\n  process.on('SIGINT', async () => {\n    await fs.unlink(tmpFile).catch(noop)\n    // eslint-disable-next-line no-process-exit\n    process.exit(130)\n  })\n}\n\nfunction writeDocuments(\n  documents: {_id?: string; _type: string} | {_id?: string; _type: string}[],\n  operation: MutationOperationName,\n  client: SanityClient,\n) {\n  const docs = Array.isArray(documents) ? documents : [documents]\n  if (docs.length === 0) {\n    throw new Error('No documents provided')\n  }\n\n  const mutations = docs.map((doc, index): Mutation => {\n    validateDocument(doc, index, docs)\n    if (operation === 'create') {\n      return {create: doc}\n    }\n\n    if (operation === 'createIfNotExists') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createIfNotExists: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    if (operation === 'createOrReplace') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createOrReplace: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    throw new Error(`Unsupported operation ${operation}`)\n  })\n\n  return client.transaction(mutations).commit()\n}\n\nfunction validateDocument(doc: unknown, index: number, arr: unknown[]) {\n  const isSingle = arr.length === 1\n\n  if (!isPlainObject(doc)) {\n    throw new Error(getErrorMessage('must be an object', index, isSingle))\n  }\n\n  if (!isSanityDocumentish(doc)) {\n    throw new Error(getErrorMessage('must have a `_type` property of type string', index, isSingle))\n  }\n}\n\nfunction isSanityDocumentish(doc: unknown): doc is {_type: string} {\n  return (\n    doc !== null &&\n    typeof doc === 'object' &&\n    '_type' in doc &&\n    typeof (doc as any)._type === 'string'\n  )\n}\n\nfunction isIdentifiedSanityDocument(doc: unknown): doc is IdentifiedSanityDocumentStub {\n  return isSanityDocumentish(doc) && '_id' in doc\n}\n\nfunction getErrorMessage(message: string, index: number, isSingle: boolean): string {\n  return isSingle ? `Document ${message}` : `Document at index ${index} ${message}`\n}\n\nfunction getResultMessage(\n  result: MultipleMutationResult,\n  operation: MutationOperationName,\n): string {\n  const joiner = '\\n  - '\n  if (operation === 'createOrReplace') {\n    return `Upserted:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  if (operation === 'create') {\n    return `Created:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  // \"Missing\" (createIfNotExists)\n  const created: string[] = []\n  const skipped: string[] = []\n  for (const res of result.results) {\n    if (res.operation === 'update') {\n      skipped.push(res.id)\n    } else {\n      created.push(res.id)\n    }\n  }\n\n  if (created.length > 0 && skipped.length > 0) {\n    return [\n      `Created:\\n  - ${created.join(joiner)}`,\n      `Skipped (already exists):${joiner}${skipped.join(joiner)}`,\n    ].join('\\n\\n')\n  } else if (created.length > 0) {\n    return `Created:\\n  - ${created.join(joiner)}`\n  }\n\n  return `Skipped (already exists):\\n  - ${skipped.join(joiner)}`\n}\n\nfunction getEditor() {\n  const defaultEditor = /^win/.test(process.platform) ? 'notepad' : 'vim'\n  // eslint-disable-next-line no-process-env\n  const editor = process.env.VISUAL || process.env.EDITOR || defaultEditor\n  const args = editor.split(/\\s+/)\n  const bin = args.shift() || ''\n  return {bin, args}\n}\n\nexport default createDocumentsCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport pluralize from 'pluralize-esm'\n\nconst helpText = `\nDelete a document from the projects configured dataset\n\nOptions\n  --dataset NAME to override dataset\n\nExample\n  # Delete the document with the ID \"myDocId\"\n  sanity documents delete myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents delete 'myDocId'\n\n  # Delete document with ID \"someDocId\" from dataset \"blog\"\n  sanity documents delete --dataset=blog someDocId\n\n  # Delete the document with ID \"doc1\" and \"doc2\"\n  sanity documents delete doc1 doc2\n`\n\ninterface DeleteFlags {\n  dataset?: string\n}\n\nconst deleteDocumentsCommand: CliCommandDefinition<DeleteFlags> = {\n  name: 'delete',\n  group: 'documents',\n  signature: '[ID] [...IDS]',\n  helpText,\n  description: 'Delete a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {dataset} = args.extOptions\n    const ids = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!ids.length) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    const transaction = ids.reduce((trx, id) => trx.delete(id), client.transaction())\n    try {\n      const {results} = await transaction.commit()\n      const deleted = results.filter((res) => res.operation === 'delete').map((res) => res.id)\n      const notFound = ids.filter((id) => !deleted.includes(id))\n      if (deleted.length > 0) {\n        output.print(`Deleted ${deleted.length} ${pluralize('document', deleted.length)}`)\n      }\n\n      if (notFound.length > 0) {\n        output.error(\n          chalk.red(`${pluralize('Document', notFound.length)} not found: ${notFound.join(', ')}`),\n        )\n      }\n    } catch (err) {\n      throw new Error(`Failed to delete ${pluralize('document', ids.length)}:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteDocumentsCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst documentsGroup: CliCommandGroupDefinition = {\n  name: 'documents',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages documents in your Sanity Content Lake datasets',\n}\n\nexport default documentsGroup\n","import {type CliCommandContext} from '@sanity/cli'\nimport tokenize, {type LexerToken} from 'json-lexer'\n\ninterface KeyToken {\n  type: 'key'\n  value: string\n  raw: string\n}\n\ntype ExtendedLexerToken = LexerToken | KeyToken\n\nconst identity = (inp: string): string => inp\n\nexport function colorizeJson(input: unknown, chalk: CliCommandContext['chalk']): string {\n  const formatters: Record<ExtendedLexerToken['type'], (str: string) => string> = {\n    punctuator: chalk.white,\n    key: chalk.white,\n    string: chalk.green,\n    number: chalk.yellow,\n    literal: chalk.bold,\n    whitespace: identity,\n  }\n\n  const json = JSON.stringify(input, null, 2)\n\n  return tokenize(json)\n    .map((token, i, arr): ExtendedLexerToken => {\n      // Note how the following only works because we pretty-print the JSON\n      const prevToken = i === 0 ? token : arr[i - 1]\n      if (\n        token.type === 'string' &&\n        prevToken.type === 'whitespace' &&\n        /^\\n\\s+$/.test(prevToken.value)\n      ) {\n        return {...token, type: 'key'}\n      }\n\n      return token\n    })\n    .map((token) => {\n      const formatter = formatters[token.type] || identity\n      return formatter(token.raw)\n    })\n    .join('')\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst helpText = `\nGet and print a document from the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n\nExamples\n  # Get the document with the ID \"myDocId\"\n  sanity documents get myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents get 'myDocId'\n`\n\ninterface GetDocumentFlags {\n  pretty?: boolean\n  dataset?: string\n}\n\nconst getDocumentsCommand: CliCommandDefinition<GetDocumentFlags> = {\n  name: 'get',\n  group: 'documents',\n  signature: '[DOCUMENT_ID]',\n  helpText,\n  description: 'Get and print a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {pretty, dataset} = args.extOptions\n    const [docId] = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!docId) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    try {\n      const doc = await client.getDocument(docId)\n      if (!doc) {\n        throw new Error(`Document ${docId} not found`)\n      }\n\n      output.print(pretty ? colorizeJson(doc, chalk) : JSON.stringify(doc, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to fetch document:\\n${err.message}`)\n    }\n  },\n}\n\nexport default getDocumentsCommand\n","import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst defaultApiVersion = 'v2022-06-01'\n\nconst helpText = `\nRun a query against the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n  --project PROJECT to override project ID\n  --anonymous Send the query without any authorization token\n  --api-version API version to use (defaults to \\`${defaultApiVersion}\\`)\n\nEnvironment variables\n  \\`SANITY_CLI_QUERY_API_VERSION\\` - will use the defined API version,\n  unless \\`--api-version\\` is specified.\n\nExamples\n  # Fetch 5 documents of type \"movie\"\n  sanity documents query '*[_type == \"movie\"][0..4]'\n\n  # Fetch title of the oldest movie in the dataset named \"staging\"\n  sanity documents query '*[_type == \"movie\"]|order(releaseDate asc)[0]{title}' --dataset staging\n\n  # Use API version v2021-06-07 and do a query\n  sanity documents query --api-version v2021-06-07 '*[_id == \"header\"] { \"headerText\": pt::text(body) }'\n`\n\ninterface CliQueryCommandFlags {\n  pretty?: boolean\n  anonymous?: boolean\n  dataset?: string\n  project?: string\n  apiVersion?: string\n}\n\nexport default {\n  name: 'query',\n  group: 'documents',\n  signature: '[QUERY]',\n  helpText,\n  description: 'Query for documents',\n  action: async (\n    args: CliCommandArguments<CliQueryCommandFlags>,\n    context: CliCommandContext,\n  ): Promise<void> => {\n    // Reparsing arguments for improved control of flags\n    const {\n      pretty,\n      dataset,\n      project,\n      anonymous,\n      'api-version': apiVersion,\n    } = await parseCliFlags(args)\n    const {apiClient, output, chalk, cliConfig} = context\n    const [query] = args.argsWithoutOptions\n\n    if (!query) {\n      throw new Error('Query must be specified')\n    }\n\n    if (!apiVersion) {\n      output.warn(chalk.yellow(`--api-version not specified, using \\`${defaultApiVersion}\\``))\n    }\n\n    const requireDataset = !dataset\n    const requireProject = !project\n    const requireUser = !anonymous\n\n    if (requireProject && !cliConfig?.api?.projectId) {\n      throw new Error(\n        'No project configured in CLI config - either configure one, or use `--project` flag',\n      )\n    }\n\n    if (requireDataset && !cliConfig?.api?.dataset) {\n      throw new Error(\n        'No dataset configured in CLI config - either configure one, or use `--dataset` flag',\n      )\n    }\n\n    const baseClient = apiClient({requireProject, requireUser}).clone()\n    const {dataset: originalDataset, projectId: originalProjectId} = baseClient.config()\n\n    const client = baseClient.config({\n      projectId: project || originalProjectId,\n      dataset: dataset || originalDataset,\n      apiVersion: apiVersion || defaultApiVersion,\n    })\n\n    try {\n      const docs = await client.fetch(query)\n      if (!docs) {\n        throw new Error('Query returned no results')\n      }\n\n      output.print(pretty ? colorizeJson(docs, chalk) : JSON.stringify(docs, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to run query:\\n${err.message}`)\n    }\n  },\n}\n\nfunction parseCliFlags(args: CliCommandArguments<CliQueryCommandFlags>) {\n  // eslint-disable-next-line no-process-env\n  const fallbackApiVersion = process.env.SANITY_CLI_QUERY_API_VERSION\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('pretty', {type: 'boolean', default: false})\n    .option('dataset', {type: 'string'})\n    .option('project', {type: 'string'})\n    .option('anonymous', {type: 'boolean', default: false})\n    .option('api-version', {type: 'string', default: fallbackApiVersion}).argv\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst description = `Downloads and validates all document specified in a workspace`\n\nconst helpText = `\nOptions\n  -y, --yes Skips the first confirmation prompt.\n  --workspace <name> The name of the workspace to use when downloading and validating all documents.\n  --dataset <name> Override the dataset used. By default, this is derived from the given workspace.\n  --file <filepath> Provide a path to either an .ndjson file or a tarball containing an .ndjson file.\n  --format <pretty|ndjson|json> The output format used to print the found validation markers and report progress.\n  --level <error|warning|info> The minimum level reported out. Defaults to warning.\n  --max-custom-validation-concurrency <number> Specify how many custom validators can run concurrently. Defaults to 5.\n  --max-fetch-concurrency <number> Specify how many \\`client.fetch\\` requests are allow concurrency at once. Defaults to 25.\n\nExamples\n  # Validates all documents in a Sanity project with more than one workspace\n  sanity documents validate --workspace default\n\n  # Override the dataset specified in the workspace\n  sanity documents validate --workspace default --dataset staging\n\n  # Save the results of the report into a file\n  sanity documents validate --yes > report.txt\n\n  # Report out info level validation markers too\n  sanity documents validate --level info\n`\n\nconst validateDocumentsCommand: CliCommandDefinition = {\n  name: 'validate',\n  group: 'documents',\n  signature: '',\n  description,\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/validation/validateAction')\n\n    return mod.default(args, context)\n  },\n} satisfies CliCommandDefinition\n\nexport default validateDocumentsCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --with-user-token Prime access token from CLI config into getCliClient()\n  --mock-browser-env Mocks a browser-like environment using jsdom\n\nExamples\n  # Run the script at some/script.js in Sanity context\n  sanity exec some/script.js\n\n  # Run the script at migrations/fullname.ts and configure \\`getCliClient()\\`\n  # from \\`sanity/cli\\`to include the current user's token\n  sanity exec migrations/fullname.ts --with-user-token\n\n  # Run the script at scripts/browserScript.js in a mock browser environment\n  sanity exec scripts/browserScript.js --mock-browser-env\n\n  # Pass arbitrary arguments to scripts by separating them with a \\`--\\`.\n  # Arguments are available in \\`process.argv\\` as they would in regular node scripts\n  # eg the following command would yield a \\`process.argv\\` of:\n  # ['/path/to/node', '/path/to/myscript.js', '--dry-run', 'positional-argument']\n  sanity exec --mock-browser-env myscript.js -- --dry-run positional-argument\n`\n\nexport const execCommand: CliCommandDefinition = {\n  name: 'exec',\n  signature: 'SCRIPT',\n  description: 'Executes a script within the Sanity Studio context',\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/exec/execScript')\n\n    return mod.default(args, context)\n  },\n}\n\nexport default execCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type DeleteGraphQLApiFlags} from '../../actions/graphql/deleteApiAction'\n\nconst helpText = `\nOptions\n  --api <api-id> Undeploy API with this ID (project, dataset and tag flags takes preference)\n  --project <projectId> Project ID to delete GraphQL API for\n  --dataset <dataset> Delete GraphQL API for the given dataset\n  --tag <tag> Delete GraphQL API for the given tag (defaults to 'default')\n  --force Skip confirmation prompt, forcefully undeploying the GraphQL API\n\nExamples\n  sanity graphql undeploy\n  sanity graphql undeploy --api ios\n  sanity graphql undeploy --dataset staging\n  sanity graphql undeploy --dataset staging --tag next\n`\n\nconst deleteGraphQLAPICommand: CliCommandDefinition = {\n  name: 'undeploy',\n  group: 'graphql',\n  signature: '',\n  description: 'Remove a deployed GraphQL API',\n  action: async (args: CliCommandArguments<DeleteGraphQLApiFlags>, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deleteApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deleteGraphQLAPICommand\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --dry-run Validate defined APIs, exiting with an error on breaking changes\n  --force Deploy API without confirming breaking changes\n  --api <api-id> Only deploy API with this ID. Can be specified multiple times.\n\nThe following options will override any setting from the CLI configuration file\n(sanity.cli.js/sanity.cli.ts) - and applies to ALL defined APIs defined in that\nconfiguration file. Tread with caution!\n\n  --tag Deploy API(s) to given tag (defaults to 'default')\n  --dataset <name> Deploy API for the given dataset\n  --generation <gen1|gen2|gen3> API generation to deploy (defaults to 'gen3')\n  --non-null-document-fields Use non-null document fields (_id, _type etc)\n  --playground Enable GraphQL playground for easier debugging\n  --no-playground Disable GraphQL playground\n  --with-union-cache *Experimental:* Enable union cache that optimizes schema generation for schemas with many self referencing types\n\nExamples\n  # Deploy all defined GraphQL APIs\n  sanity graphql deploy\n\n  # Validate defined GraphQL APIs, check for breaking changes, skip deploy\n  sanity graphql deploy --dry-run\n\n  # Deploy only the GraphQL APIs with the IDs \"staging\" and \"ios\"\n  sanity graphql deploy --api staging --api ios\n\n  # Deploy all defined GraphQL APIs, overriding any playground setting\n  sanity graphql deploy --playground\n`\n\nconst deployGraphQLAPICommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '',\n  group: 'graphql',\n  description: 'Deploy a GraphQL API from the current Sanity schema',\n  action: async (args: {argv?: string[]}, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deployApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployGraphQLAPICommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst graphqlGroup: CliCommandGroupDefinition = {\n  name: 'graphql',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: \"Deploys changes to your project's GraphQL API(s)\",\n}\n\nexport default graphqlGroup\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity graphql list\n`\n\nconst listGraphQLAPIsCommand: CliCommandDefinition = {\n  name: 'list',\n  signature: '',\n  group: 'graphql',\n  description: 'Lists all the GraphQL endpoints deployed for this project',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/graphql/listApisAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default listGraphQLAPIsCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport open from 'open'\n\nconst createHookCommand: CliCommandDefinition = {\n  name: 'create',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'Create a new hook for the given dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    const {projectId} = client.config()\n    if (!projectId) {\n      throw new Error('No project ID found')\n    }\n\n    const projectInfo = (await client.projects.getById(projectId)) || {}\n    const organizationId = projectInfo.organizationId || 'personal'\n    const manageUrl = `https://www.sanity.io/organizations/${organizationId}/project/${projectId}/api/webhooks/new`\n\n    output.print(`Opening ${manageUrl}`)\n    open(manageUrl)\n  },\n}\n\nexport default createHookCommand\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\n\nimport {type Hook} from './types'\n\nconst deleteHookCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'Delete a hook within your project',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    try {\n      await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request({method: 'DELETE', uri: `/hooks/${hookId}`})\n    } catch (err) {\n      throw new Error(`Hook deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to delete',\n    type: 'list',\n    choices,\n  })\n}\n\nexport default deleteHookCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst hookGroup: CliCommandGroupDefinition = {\n  name: 'hook',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Sets up and manages webhooks within your Sanity project',\n}\n\nexport default hookGroup\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {type DeliveryAttempt} from './types'\n\nconst printHookAttemptCommand: CliCommandDefinition = {\n  name: 'attempt',\n  group: 'hook',\n  signature: 'ATTEMPT_ID',\n  helpText: '',\n  description: 'Print details of a given webhook delivery attempt',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [attemptId] = args.argsWithoutOptions\n    const client = apiClient()\n\n    let attempt\n    try {\n      attempt = await client.request<DeliveryAttempt>({uri: `/hooks/attempts/${attemptId}`})\n    } catch (err) {\n      throw new Error(`Hook attempt retrieval failed:\\n${err.message}`)\n    }\n\n    const {createdAt, resultCode, resultBody, failureReason, inProgress} = attempt\n\n    output.print(`Date: ${createdAt}`)\n    output.print(`Status: ${getStatus(attempt)}`)\n    output.print(`Status code: ${resultCode}`)\n\n    if (attempt.isFailure) {\n      output.print(`Failure: ${formatFailure(attempt)}`)\n    }\n\n    if (!inProgress && (!failureReason || failureReason === 'http')) {\n      const body = resultBody ? `\\n---\\n${resultBody}\\n---\\n` : '<empty>'\n      output.print(`Response body: ${body}`)\n    }\n  },\n}\n\nexport default printHookAttemptCommand\n\nexport function formatFailure(\n  attempt: DeliveryAttempt,\n  options: {includeHelp?: boolean} = {},\n): string {\n  const {includeHelp} = options\n  const {id, failureReason, resultCode} = attempt\n  const help = includeHelp ? `(run \\`sanity hook attempt ${id}\\` for details)` : ''\n  switch (failureReason) {\n    case 'http':\n      return `HTTP ${resultCode} ${help}`\n    case 'timeout':\n      return 'Request timed out'\n    case 'network':\n      return 'Network error'\n    case 'other':\n    default:\n  }\n\n  return 'Unknown error'\n}\n\nexport function getStatus(attempt: DeliveryAttempt): string {\n  if (attempt.isFailure) {\n    return 'Failed'\n  }\n\n  if (attempt.inProgress) {\n    return 'In progress'\n  }\n\n  return 'Delivered'\n}\n","import {inspect} from 'node:util'\n\nimport {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\nimport {groupBy} from 'lodash'\n\nimport {formatFailure} from './printHookAttemptCommand'\nimport {type DeliveryAttempt, type Hook, type HookMessage} from './types'\n\ninterface ListHookFlags {\n  detailed?: boolean\n}\n\nconst listHookLogsCommand: CliCommandDefinition<ListHookFlags> = {\n  name: 'logs',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'List latest log entries for a given hook',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const flags = args.extOptions\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    let messages\n    let attempts\n    try {\n      messages = await client.request<HookMessage[]>({uri: `/hooks/${hookId}/messages`})\n      attempts = await client.request<DeliveryAttempt[]>({uri: `/hooks/${hookId}/attempts`})\n    } catch (err) {\n      throw new Error(`Hook logs retrieval failed:\\n${err.message}`)\n    }\n\n    const groupedAttempts = groupBy(attempts, 'messageId')\n    const populated = messages.map((msg): HookMessage & {attempts: DeliveryAttempt[]} => ({\n      ...msg,\n      attempts: groupedAttempts[msg.id],\n    }))\n\n    const totalMessages = messages.length - 1\n    populated.forEach((message, i) => {\n      printMessage(message, context, {detailed: flags.detailed})\n      printSeparator(context, totalMessages === i)\n    })\n  },\n}\n\nexport default listHookLogsCommand\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  if (hooks.length === 0) {\n    throw new Error('No hooks currently registered')\n  }\n\n  if (hooks.length === 1) {\n    return hooks[0].id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to list logs for',\n    type: 'list',\n    choices,\n  })\n}\n\nfunction printSeparator(context: CliCommandContext, skip: boolean) {\n  if (!skip) {\n    context.output.print('---\\n')\n  }\n}\n\nfunction printMessage(\n  message: HookMessage & {attempts: DeliveryAttempt[]},\n  context: CliCommandContext,\n  options: {detailed?: boolean},\n) {\n  const {detailed} = options\n  const {output, chalk} = context\n\n  output.print(`Date: ${message.createdAt}`)\n  output.print(`Status: ${message.status}`)\n  output.print(`Result code: ${message.resultCode}`)\n\n  if (message.failureCount > 0) {\n    output.print(`Failures: ${message.failureCount}`)\n  }\n\n  if (detailed) {\n    output.print('Payload:')\n    output.print(inspect(JSON.parse(message.payload), {colors: true}))\n  }\n\n  if (detailed && message.attempts) {\n    output.print('Attempts:')\n    message.attempts.forEach((attempt) => {\n      const date = attempt.createdAt.replace(/\\.\\d+Z$/, 'Z')\n      const prefix = `  [${date}]`\n\n      if (attempt.inProgress) {\n        output.print(`${prefix} ${chalk.yellow('Pending')}`)\n      } else if (attempt.isFailure) {\n        const failure = formatFailure(attempt, {includeHelp: true})\n        output.print(`${prefix} ${chalk.yellow(`Failure: ${failure}`)}`)\n      } else {\n        output.print(`${prefix} Success: HTTP ${attempt.resultCode} (${attempt.duration}ms)`)\n      }\n    })\n  }\n\n  // Leave some empty space between messages\n  output.print('')\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {type Hook} from './types'\n\nconst listHooksCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'List hooks for a given project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    let hooks\n    try {\n      hooks = await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request<Hook[]>({uri: '/hooks'})\n    } catch (err) {\n      throw new Error(`Hook list retrieval failed:\\n${err.message}`)\n    }\n\n    hooks.forEach((hook) => {\n      output.print(`Name: ${hook.name}`)\n      output.print(`Dataset: ${hook.dataset}`)\n      output.print(`URL: ${hook.url}`)\n\n      if (hook.type === 'document') {\n        output.print(`HTTP method: ${hook.httpMethod}`)\n\n        if (hook.description) {\n          output.print(`Description: ${hook.description}`)\n        }\n      }\n\n      output.print('')\n    })\n  },\n}\n\nexport default listHooksCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst description = 'Extracts the studio configuration as one or more JSON manifest files.'\n\nconst helpText = `\n**Note**: This command is experimental and subject to change. It is currently intended for use with Create only.\n\nOptions\n  --path Optional path to specify destination directory of the manifest files. Default: /dist/static\n\nExamples\n  # Extracts manifests\n  sanity manifest extract\n\n  # Extracts manifests into /public/static\n  sanity manifest extract --path /public/static\n`\n\nconst extractManifestCommand: CliCommandDefinition = {\n  name: 'extract',\n  group: 'manifest',\n  signature: '',\n  description,\n  helpText,\n  action: async (args, context) => {\n    const {extractManifestSafe} = await import('../../actions/manifest/extractManifestAction')\n    const extractError = await extractManifestSafe(args, context)\n    if (extractError) {\n      throw extractError\n    }\n    return extractError\n  },\n}\n\nexport default extractManifestCommand\n","export default {\n  name: 'manifest',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interacts with the studio configuration.',\n}\n","export const MIGRATIONS_DIRECTORY = 'migrations'\nexport const MIGRATION_SCRIPT_EXTENSIONS = ['mjs', 'js', 'ts', 'cjs']\nexport const DEFAULT_API_VERSION = 'v2024-01-29'\n","export const minimalAdvanced = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {defineMigration, patch, at, setIfMissing} from 'sanity/migrate'\n\n/**\n * this migration will set \\`Default title\\` on all documents that are missing a title\n * and make \\`true\\` the default value for the \\`enabled\\` field\n */\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  async *migrate(documents, context) {\n    for await (const document of documents()) {\n      yield patch(document._id, [\n        at('title', setIfMissing('Default title')),\n        at('enabled', setIfMissing(true)),\n      ])\n    }\n  }\n})\n`\n","export const minimalSimple = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {at, defineMigration, setIfMissing, unset} from 'sanity/migrate'\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    document(doc, context) {\n      // this will be called for every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n\n      return at('title', setIfMissing('Default title'))\n    },\n    node(node, path, context) {\n      // this will be called for every node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n\n      if (typeof node === 'string' && node === 'deleteme') {\n        return unset()\n      }\n    },\n    object(node, path, context) {\n      // this will be called for every object node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n      if (node._type === 'author') {\n        // make sure all authors objects have a books array\n        return at('books', setIfMissing([]))\n      }\n    },\n    array(node, path, context) {\n      // this will be called for every array node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    string(node, path, context) {\n      // this will be called for every string node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    number(node, path, context) {\n      // this will be called for every number node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    boolean(node, path, context) {\n      // this will be called for every boolean node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    null(node, path, context) {\n      // this will be called for every null node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n  },\n})\n`\n","export const renameField = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {defineMigration, at, setIfMissing, unset} from 'sanity/migrate'\n\nconst from = 'oldFieldName'\nconst to = 'newFieldName'\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    document(doc, context) {\n      return [\n        at(to, setIfMissing(doc[from])),\n        at(from, unset())\n      ]\n    }\n  }\n})\n`\n","export const renameType = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {defineMigration, at, set} from 'sanity/migrate'\n\nconst oldType = 'old'\nconst newType = 'new'\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    object(object, path, context) {\n      if (object._type === oldType) {\n        return at('_type', set(newType))\n      }\n    }\n  }\n})\n`\n","export const stringToPTE = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {pathsAreEqual, stringToPath} from 'sanity'\nimport {defineMigration, set} from 'sanity/migrate'\n\nconst targetPath = stringToPath('some.path')\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    string(node, path, ctx) {\n      if (pathsAreEqual(path, targetPath)) {\n        return set([\n          {\n            style: 'normal',\n            _type: 'block',\n            children: [\n              {\n                _type: 'span',\n                marks: [],\n                text: node,\n              },\n            ],\n            markDefs: [],\n          },\n        ])\n      }\n    },\n  },\n})\n`\n","import {existsSync, mkdirSync} from 'node:fs'\nimport {writeFile} from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\nimport {deburr} from 'lodash'\n\nimport {MIGRATIONS_DIRECTORY} from './constants'\nimport {minimalAdvanced} from './templates/minimalAdvanced'\nimport {minimalSimple} from './templates/minimalSimple'\nimport {renameField} from './templates/renameField'\nimport {renameType} from './templates/renameType'\nimport {stringToPTE} from './templates/stringToPTE'\n\nconst helpText = `\nExamples:\n  # Create a new migration, prompting for title and options\n  sanity migration create\n\n  # Create a new migration with the provided title, prompting for options\n  sanity migration create \"Rename field from location to address\"\n`\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface CreateMigrationFlags {}\n\nconst TEMPLATES = [\n  {name: 'Minimalistic migration to get you started', template: minimalSimple},\n  {name: 'Rename an object type', template: renameType},\n  {name: 'Rename a field', template: renameField},\n  {name: 'Convert string field to Portable Text', template: stringToPTE},\n  {\n    name: 'Advanced template using async iterators providing more fine grained control',\n    template: minimalAdvanced,\n  },\n]\n\nconst createMigrationCommand: CliCommandDefinition<CreateMigrationFlags> = {\n  name: 'create',\n  group: 'migration',\n  signature: '[TITLE]',\n  helpText,\n  description: 'Create a new migration within your project',\n  action: async (args, context) => {\n    const {output, prompt, workDir, chalk} = context\n\n    let [title] = args.argsWithoutOptions\n\n    while (!title?.trim()) {\n      title = await prompt.single({\n        type: 'input',\n        suffix: ' (e.g. \"Rename field from location to address\")',\n        message: 'Title of migration',\n      })\n      if (!title.trim()) {\n        output.error(chalk.red('Name cannot be empty'))\n      }\n    }\n    const types = await prompt.single({\n      type: 'input',\n      suffix: ' (optional)',\n      message: 'Type of documents to migrate. You can add multiple types separated by comma',\n    })\n\n    const templatesByName = Object.fromEntries(TEMPLATES.map((t) => [t.name, t]))\n    const template = await prompt.single({\n      type: 'list',\n      message: 'Select a template',\n      choices: TEMPLATES.map((definedTemplate) => ({\n        name: definedTemplate.name,\n        value: definedTemplate.name,\n      })),\n    })\n\n    const sluggedName = deburr(title.toLowerCase())\n      .replace(/\\s+/g, '-')\n      .replace(/[^a-z0-9-]/g, '')\n\n    const destDir = path.join(workDir, MIGRATIONS_DIRECTORY, sluggedName)\n    if (existsSync(destDir)) {\n      if (\n        !(await prompt.single({\n          type: 'confirm',\n          message: `Migration directory ${chalk.cyan(destDir)} already exists. Overwrite?`,\n          default: false,\n        }))\n      ) {\n        return\n      }\n    }\n    mkdirSync(destDir, {recursive: true})\n\n    const renderedTemplate = (templatesByName[template].template || minimalSimple)({\n      migrationName: title,\n      documentTypes: types\n        .split(',')\n        .map((t) => t.trim())\n        .filter(Boolean),\n    })\n\n    const definitionFile = path.join(destDir, 'index.ts')\n\n    await writeFile(definitionFile, renderedTemplate)\n    // To dry run it, run \\`sanity migration run ${sluggedName}\\``)\n    output.print()\n    output.print(`${chalk.green('✓')} Migration created!`)\n    output.print()\n    output.print('Next steps:')\n    output.print(\n      `Open ${chalk.bold(\n        definitionFile,\n      )} in your code editor and write the code for your migration.`,\n    )\n    output.print(\n      `Dry run the migration with:\\n\\`${chalk.bold(\n        `sanity migration run ${sluggedName} --project=<projectId> --dataset <dataset> `,\n      )}\\``,\n    )\n    output.print(\n      `Run the migration against a dataset with:\\n \\`${chalk.bold(\n        `sanity migration run ${sluggedName} --project=<projectId> --dataset <dataset> --no-dry-run`,\n      )}\\``,\n    )\n    output.print()\n    output.print(\n      `👉 Learn more about schema and content migrations at ${chalk.bold(\n        'https://www.sanity.io/docs/schema-and-content-migrations',\n      )}`,\n    )\n  },\n}\nexport default createMigrationCommand\n","import path from 'node:path'\n\nimport {type Migration} from '@sanity/migrate'\nimport {isPlainObject} from 'lodash'\n\nimport {MIGRATION_SCRIPT_EXTENSIONS, MIGRATIONS_DIRECTORY} from '../constants'\n\ninterface ResolvedMigrationScript {\n  /**\n   * Relative path from the working directory to the migration script\n   */\n  relativePath: string\n\n  /**\n   * Absolute path to the migration script\n   */\n  absolutePath: string\n\n  /**\n   * The migration module, if it could be resolved - otherwise `undefined`\n   */\n  mod?: {default: Migration; up?: unknown; down?: unknown}\n}\n\n/**\n * Resolves the potential paths to a migration script.\n * Considers the following paths (where `<ext>` is 'mjs', 'js', 'ts' or 'cjs'):\n *\n * - `<migrationsDir>/<migrationName>.<ext>`\n * - `<migrationsDir>/<migrationName>/index.<ext>`\n *\n * Note that all possible paths are returned, even if the files do not exist.\n * Check the `mod` property to see if a module could actually be loaded.\n *\n * @param workDir - Working directory of the studio\n * @param migrationName - The name of the migration directory to resolve\n * @returns An array of potential migration scripts\n * @internal\n */\nexport function resolveMigrationScript(\n  workDir: string,\n  migrationName: string,\n): ResolvedMigrationScript[] {\n  return [migrationName, path.join(migrationName, 'index')].flatMap((location) =>\n    MIGRATION_SCRIPT_EXTENSIONS.map((ext) => {\n      const relativePath = path.join(MIGRATIONS_DIRECTORY, `${location}.${ext}`)\n      const absolutePath = path.resolve(workDir, relativePath)\n      let mod\n      try {\n        // eslint-disable-next-line import/no-dynamic-require\n        mod = require(absolutePath)\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw new Error(`Error: ${err.message}\"`)\n        }\n      }\n      return {relativePath, absolutePath, mod}\n    }),\n  )\n}\n\n/**\n * Checks whether or not the passed resolved migration script is actually loadable (eg has a default export)\n *\n * @param script - The resolved migration script to check\n * @returns `true` if the script is loadable, `false` otherwise\n * @internal\n */\nexport function isLoadableMigrationScript(\n  script: ResolvedMigrationScript,\n): script is Required<ResolvedMigrationScript> {\n  if (typeof script.mod === 'undefined' || !isPlainObject(script.mod.default)) {\n    return false\n  }\n\n  const mod = script.mod.default\n  return typeof mod.title === 'string' && mod.migrate !== undefined\n}\n","import {readdir} from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\nimport {type Migration} from '@sanity/migrate'\nimport {Table} from 'console-table-printer'\nimport {register} from 'esbuild-register/dist/node'\n\nimport {MIGRATION_SCRIPT_EXTENSIONS, MIGRATIONS_DIRECTORY} from './constants'\nimport {isLoadableMigrationScript, resolveMigrationScript} from './utils/resolveMigrationScript'\n\nconst helpText = ``\n\nconst listMigrationCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'migration',\n  signature: '',\n  helpText,\n  description: 'List available migrations',\n  action: async (_, context) => {\n    const {workDir, output, chalk} = context\n    try {\n      const migrations = await resolveMigrations(workDir)\n\n      if (migrations.length === 0) {\n        output.print('No migrations found in migrations folder of the project')\n        output.print(\n          `\\nRun ${chalk.green(`\\`sanity migration create <NAME>\\``)} to create a new migration`,\n        )\n        return\n      }\n\n      const table = new Table({\n        title: `Found ${migrations.length} migrations in project`,\n        columns: [\n          {name: 'id', title: 'ID', alignment: 'left'},\n          {name: 'title', title: 'Title', alignment: 'left'},\n        ],\n      })\n\n      migrations.forEach((definedMigration) => {\n        table.addRow({id: definedMigration.id, title: definedMigration.migration.title})\n      })\n      table.printTable()\n      output.print('\\nRun `sanity migration run <ID>` to run a migration')\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        output.print('No migrations folder found in the project')\n        output.print(\n          `\\nRun ${chalk.green(`\\`sanity migration create <NAME>\\``)} to create a new migration`,\n        )\n        return\n      }\n      throw new Error(`An error occurred while listing migrations: ${error.message}`)\n    }\n  },\n}\n\n/**\n * A resolved migration, where you are guaranteed that the migration file exists\n *\n * @internal\n */\nexport interface ResolvedMigration {\n  id: string\n  migration: Migration\n}\n\n/**\n * Resolves all migrations in the studio working directory\n *\n * @param workDir - The studio working directory\n * @returns Array of migrations and their respective paths\n * @internal\n */\nexport async function resolveMigrations(workDir: string): Promise<ResolvedMigration[]> {\n  let unregister\n  if (!__DEV__) {\n    unregister = register({\n      target: `node${process.version.slice(1)}`,\n      supported: {'dynamic-import': true},\n    }).unregister\n  }\n\n  const migrationsDir = path.join(workDir, MIGRATIONS_DIRECTORY)\n  const migrationEntries = await readdir(migrationsDir, {withFileTypes: true})\n\n  const migrations: ResolvedMigration[] = []\n  for (const entry of migrationEntries) {\n    const entryName = entry.isDirectory() ? entry.name : removeMigrationScriptExtension(entry.name)\n    const candidates = resolveMigrationScript(workDir, entryName).filter(isLoadableMigrationScript)\n\n    for (const candidate of candidates) {\n      migrations.push({\n        id: entryName,\n        migration: candidate.mod.default,\n      })\n    }\n  }\n\n  if (unregister) {\n    unregister()\n  }\n\n  return migrations\n}\n\nfunction removeMigrationScriptExtension(fileName: string) {\n  // Remove `.ts`, `.js` etc from the end of a filename\n  return MIGRATION_SCRIPT_EXTENSIONS.reduce(\n    (name, ext) => (name.endsWith(`.${ext}`) ? path.basename(name, `.${ext}`) : name),\n    fileName,\n  )\n}\n\nexport default listMigrationCommand\n","export default {\n  name: 'migration',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages content migrations for Content Lake datasets',\n}\n","import {isIndexSegment, isIndexTuple, isKeySegment, type Path} from '@sanity/types'\n\n// FIXME: de-dupe this\n// copy/paste of `pathToString` from 'sanity' to prevent circular imports\nfunction pathToString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    if (isIndexSegment(segment)) {\n      return `${target}[${segment}]`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (isIndexTuple(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    if (typeof segment === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\ninterface BaseNode {\n  path: Path\n}\n\nexport interface Tree<Node extends BaseNode> {\n  nodes?: Node[]\n  children?: Record<string, Tree<Node>>\n}\n\n/**\n * Recursively calculates the max length of all the keys in the given validation\n * tree respecting extra length due to indentation depth. Used to calculate the\n * padding for the rest of the tree.\n */\nexport const maxKeyLength = (children: Record<string, Tree<BaseNode>> = {}, depth = 0): number => {\n  return Object.entries(children)\n    .map(([key, child]) =>\n      Math.max(key.length + depth * 2, maxKeyLength(child.children, depth + 1)),\n    )\n    .reduce((max, next) => (next > max ? next : max), 0)\n}\n\ninterface Options<Node extends BaseNode> {\n  node?: Record<string, Tree<Node>>\n  paddingLength: number\n  indent?: string\n  getNodes?: (node: Tree<Node>) => Node[] | undefined\n  getMessage: (node: Node) => string\n}\n\n/**\n * Recursively formats a given tree into a printed user-friendly tree structure\n */\nexport const formatTree = <Node extends BaseNode>({\n  node = {},\n  paddingLength,\n  indent = '',\n  getNodes: getLeaves = ({nodes}) => nodes,\n  getMessage,\n}: Options<Node>): string => {\n  const entries = Object.entries(node)\n\n  return entries\n    .map(([key, child], index) => {\n      const isLast = index === entries.length - 1\n      const nextIndent = `${indent}${isLast ? '  ' : '│ '}`\n      const leaves = getLeaves(child)\n\n      const nested = formatTree({\n        node: child.children,\n        paddingLength,\n        indent: nextIndent,\n        getNodes: getLeaves,\n        getMessage,\n      })\n\n      if (!leaves?.length) {\n        const current = `${indent}${isLast ? '└' : '├'}─ ${key}`\n        return [current, nested].filter(Boolean).join('\\n')\n      }\n\n      const [first, ...rest] = leaves\n      const firstPadding = '.'.repeat(paddingLength - indent.length - key.length)\n      const elbow = isLast ? '└' : '├'\n      const subsequentPadding = ' '.repeat(paddingLength - indent.length + 2)\n\n      const firstMessage = `${indent}${elbow}─ ${key} ${firstPadding} ${getMessage(first)}`\n      const subsequentMessages = rest\n        .map((marker) => `${nextIndent}${subsequentPadding} ${getMessage(marker)}`)\n        .join('\\n')\n\n      const current = [firstMessage, subsequentMessages].filter(Boolean).join('\\n')\n      return [current, nested].filter(Boolean).join('\\n')\n    })\n    .join('\\n')\n}\n\n/**\n * Converts a set of markers with paths into a tree of markers where the paths\n * are embedded in the tree\n */\nexport function convertToTree<const Node extends BaseNode>(nodes: Node[]): Tree<Node> {\n  const root: Tree<Node> = {}\n\n  // add the markers to the tree\n  function addNode(node: Node, tree: Tree<Node> = root) {\n    // if we've traversed the whole path\n    if (!node.path.length) {\n      if (!tree.nodes) tree.nodes = [] // ensure markers is defined\n\n      // then add the marker to the front\n      tree.nodes.push(node)\n      return\n    }\n\n    const [current, ...rest] = node.path\n    const key = pathToString([current])\n\n    // ensure the current node has children and the next node\n    if (!tree.children) tree.children = {}\n    if (!(key in tree.children)) tree.children[key] = {}\n\n    addNode({...node, path: rest}, tree.children[key])\n  }\n\n  for (const node of nodes) addNode(node)\n  return root\n}\n","import {isatty} from 'node:tty'\n\nimport {type Migration, type Mutation, type NodePatch, type Transaction} from '@sanity/migrate'\nimport {type KeyedSegment} from '@sanity/types'\nimport {type Chalk} from 'chalk'\n\nimport {convertToTree, formatTree, maxKeyLength} from '../../util/tree'\n\ntype ItemRef = string | number\ntype Impact = 'destructive' | 'maybeDestructive' | 'incremental'\ntype Variant = Impact | 'info'\n\nconst isTty = isatty(1)\n\ninterface FormatterOptions<Subject> {\n  chalk: Chalk\n  subject: Subject\n  migration: Migration\n  indentSize?: number\n}\n\nexport function prettyFormat({\n  chalk,\n  subject,\n  migration,\n  indentSize = 0,\n}: FormatterOptions<Mutation | Transaction | (Mutation | Transaction)[]>): string {\n  return (Array.isArray(subject) ? subject : [subject])\n    .map((subjectEntry) => {\n      if (subjectEntry.type === 'transaction') {\n        return [\n          [\n            badge('transaction', 'info', chalk),\n            typeof subjectEntry.id === 'undefined' ? null : chalk.underline(subjectEntry.id),\n          ]\n            .filter(Boolean)\n            .join(' '),\n          indent(\n            prettyFormat({\n              chalk,\n              subject: subjectEntry.mutations,\n              migration,\n              indentSize: indentSize,\n            }),\n          ),\n        ].join('\\n\\n')\n      }\n      return prettyFormatMutation({\n        chalk,\n        subject: subjectEntry,\n        migration,\n        indentSize,\n      })\n    })\n    .join('\\n\\n')\n}\n\nfunction encodeItemRef(ref: number | KeyedSegment): ItemRef {\n  return typeof ref === 'number' ? ref : ref._key\n}\n\nfunction badgeStyle(chalk: Chalk, variant: Variant): Chalk {\n  const styles: Record<Variant, Chalk> = {\n    info: chalk.bgWhite.black,\n    incremental: chalk.bgGreen.black.bold,\n    maybeDestructive: chalk.bgYellow.black.bold,\n    destructive: chalk.bgRed.black.bold,\n  }\n\n  return styles[variant]\n}\n\nfunction badge(label: string, variant: Variant, chalk: Chalk): string {\n  if (!isTty) {\n    return `[${label}]`\n  }\n\n  return badgeStyle(chalk, variant)(` ${label} `)\n}\n\nconst mutationImpact: Record<Mutation['type'], Impact> = {\n  create: 'incremental',\n  createIfNotExists: 'incremental',\n  createOrReplace: 'maybeDestructive',\n  delete: 'destructive',\n  patch: 'maybeDestructive',\n}\n\nfunction documentId(mutation: Mutation): string | undefined {\n  if ('id' in mutation) {\n    return mutation.id\n  }\n\n  if ('document' in mutation) {\n    return mutation.document._id\n  }\n\n  return undefined\n}\n\nconst listFormatter = new Intl.ListFormat('en-US', {\n  type: 'disjunction',\n})\n\nfunction mutationHeader(chalk: Chalk, mutation: Mutation, migration: Migration): string {\n  const mutationType = badge(mutation.type, mutationImpact[mutation.type], chalk)\n\n  const documentType =\n    'document' in mutation || migration.documentTypes\n      ? badge(\n          'document' in mutation\n            ? mutation.document._type\n            : listFormatter.format(migration.documentTypes ?? []),\n          'info',\n          chalk,\n        )\n      : null\n\n  // TODO: Should we list documentType when a mutation can be yielded for any document type?\n  return [mutationType, documentType, chalk.underline(documentId(mutation))]\n    .filter(Boolean)\n    .join(' ')\n}\n\nexport function prettyFormatMutation({\n  chalk,\n  subject,\n  migration,\n  indentSize = 0,\n}: FormatterOptions<Mutation>): string {\n  const lock =\n    'options' in subject ? chalk.cyan(`(if revision==${subject.options?.ifRevision})`) : ''\n  const header = [mutationHeader(chalk, subject, migration), lock].join(' ')\n  const padding = ' '.repeat(indentSize)\n\n  if (\n    subject.type === 'create' ||\n    subject.type === 'createIfNotExists' ||\n    subject.type === 'createOrReplace'\n  ) {\n    return [header, '\\n', indent(JSON.stringify(subject.document, null, 2), indentSize)].join('')\n  }\n\n  if (subject.type === 'patch') {\n    const tree = convertToTree<NodePatch>(subject.patches.flat())\n    const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n\n    return [\n      header,\n      '\\n',\n      formatTree<NodePatch>({\n        node: tree.children,\n        paddingLength,\n        indent: padding,\n        getMessage: (patch) => formatPatchMutation(chalk, patch),\n      }),\n    ].join('')\n  }\n\n  return header\n}\n\nfunction formatPatchMutation(chalk: Chalk, patch: NodePatch): string {\n  const {op} = patch\n  const formattedType = chalk.bold(op.type)\n  if (op.type === 'unset') {\n    return `${chalk.red(formattedType)}()`\n  }\n  if (op.type === 'diffMatchPatch') {\n    return `${chalk.yellow(formattedType)}(${op.value})`\n  }\n  if (op.type === 'inc' || op.type === 'dec') {\n    return `${chalk.yellow(formattedType)}(${op.amount})`\n  }\n  if (op.type === 'set') {\n    return `${chalk.yellow(formattedType)}(${JSON.stringify(op.value)})`\n  }\n  if (op.type === 'setIfMissing') {\n    return `${chalk.green(formattedType)}(${JSON.stringify(op.value)})`\n  }\n  if (op.type === 'insert') {\n    return `${chalk.green(formattedType)}(${op.position}, ${encodeItemRef(\n      op.referenceItem,\n    )}, ${JSON.stringify(op.items)})`\n  }\n  if (op.type === 'replace') {\n    return `${chalk.yellow(formattedType)}(${encodeItemRef(op.referenceItem)}, ${JSON.stringify(\n      op.items,\n    )})`\n  }\n  if (op.type === 'truncate') {\n    return `${chalk.red(formattedType)}(${op.startIndex}, ${op.endIndex})`\n  }\n  // @ts-expect-error all cases are covered\n  throw new Error(`Invalid operation type: ${op.type}`)\n}\n\nfunction indent(subject: string, size = 2): string {\n  const padding = ' '.repeat(size)\n\n  return subject\n    .split('\\n')\n    .map((line) => padding + line)\n    .join('\\n')\n}\n","import {type APIConfig} from '@sanity/migrate'\n\ntype ApiVersion = APIConfig['apiVersion']\n\nconst VERSION_PATTERN = /^v\\d+-\\d+-\\d+$|^vX$/ // Matches version strings like vYYYY-MM-DD or vX\n\n/**\n * Ensures that the provided API version string is in the correct format.\n * If the version does not start with 'v', it will be prefixed with 'v'.\n * If the version does not match the expected pattern, an error will be thrown.\n */\nexport function ensureApiVersionFormat(version: string): ApiVersion {\n  const normalizedVersion = version.startsWith('v') ? version : `v${version}`\n\n  // Check if the version matches the expected pattern\n  if (!VERSION_PATTERN.test(normalizedVersion)) {\n    throw new Error(\n      `Invalid API version format: ${normalizedVersion}. Expected format: vYYYY-MM-DD or vX`,\n    )\n  }\n\n  return normalizedVersion as ApiVersion\n}\n","import path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\nimport {\n  DEFAULT_MUTATION_CONCURRENCY,\n  dryRun,\n  MAX_MUTATION_CONCURRENCY,\n  type Migration,\n  type MigrationProgress,\n  run,\n} from '@sanity/migrate'\nimport {Table} from 'console-table-printer'\nimport {register} from 'esbuild-register/dist/node'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {debug} from '../../debug'\nimport {DEFAULT_API_VERSION, MIGRATIONS_DIRECTORY} from './constants'\nimport {resolveMigrations} from './listMigrationsCommand'\nimport {prettyFormat} from './prettyMutationFormatter'\nimport {ensureApiVersionFormat} from './utils/ensureApiVersionFormat'\nimport {isLoadableMigrationScript, resolveMigrationScript} from './utils/resolveMigrationScript'\n\nconst helpText = `\nOptions\n  --no-dry-run By default the migration runs in dry mode. Pass this option to migrate dataset.\n  --concurrency <concurrent> How many mutation requests to run in parallel. Must be between 1 and ${MAX_MUTATION_CONCURRENCY}. Default: ${DEFAULT_MUTATION_CONCURRENCY}.\n  --no-progress Don't output progress. Useful if you want debug your migration script and see the output of console.log() statements.\n  --dataset <dataset> Dataset to migrate. Defaults to the dataset configured in your Sanity CLI config.\n  --project <project id> Project ID of the dataset to migrate. Defaults to the projectId configured in your Sanity CLI config.\n  --api-version <version> API version to use when migrating. Defaults to ${DEFAULT_API_VERSION}.\n  --no-confirm Skip the confirmation prompt before running the migration. Make sure you know what you're doing before using this flag.\n  --from-export <export.tar.gz> Use a local dataset export as source for migration instead of calling the Sanity API. Note: this is only supported for dry runs.\n\n\nExamples\n  # dry run the migration\n  sanity migration run <id>\n\n  # execute the migration against a dataset\n  sanity migration run <id> --no-dry-run --project xyz --dataset staging\n\n  # execute the migration using a dataset export as the source\n  sanity migration run <id>  --from-export=production.tar.gz --no-dry-run --projectId xyz --dataset staging\n`\n\ninterface CreateFlags {\n  ['dry-run']?: boolean\n  concurrency?: number\n  ['from-export']?: string\n  progress?: boolean\n  dataset?: string\n  project?: string\n  confirm?: boolean\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .options('dry-run', {type: 'boolean', default: true})\n    .options('concurrency', {type: 'number', default: DEFAULT_MUTATION_CONCURRENCY})\n    .options('progress', {type: 'boolean', default: true})\n    .options('dataset', {type: 'string'})\n    .options('from-export', {type: 'string'})\n    .options('project', {type: 'string'})\n    .options('api-version', {type: 'string'})\n    .options('confirm', {type: 'boolean', default: true}).argv\n}\n\nconst runMigrationCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'run',\n  group: 'migration',\n  signature: 'ID',\n  helpText,\n  description: 'Run a migration against a dataset',\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {apiClient, output, prompt, chalk, workDir} = context\n    const [id] = args.argsWithoutOptions\n    const migrationsDirectoryPath = path.join(workDir, MIGRATIONS_DIRECTORY)\n\n    const flags = await parseCliFlags(args)\n\n    const fromExport = flags.fromExport\n    const dry = flags.dryRun\n    const dataset = flags.dataset\n    const project = flags.project\n    const apiVersion = flags.apiVersion\n\n    if ((dataset && !project) || (project && !dataset)) {\n      throw new Error('If either --dataset or --project is provided, both must be provided')\n    }\n\n    if (!id) {\n      output.error(chalk.red('Error: Migration ID must be provided'))\n      const migrations = await resolveMigrations(workDir)\n      const table = new Table({\n        title: `Migrations found in project`,\n        columns: [\n          {name: 'id', title: 'ID', alignment: 'left'},\n          {name: 'title', title: 'Title', alignment: 'left'},\n        ],\n      })\n\n      migrations.forEach((definedMigration) => {\n        table.addRow({id: definedMigration.id, title: definedMigration.migration.title})\n      })\n      table.printTable()\n      output.print('\\nRun `sanity migration run <ID>` to run a migration')\n\n      return\n    }\n\n    if (!__DEV__) {\n      register({\n        target: `node${process.version.slice(1)}`,\n        supported: {'dynamic-import': true},\n      })\n    }\n\n    const candidates = resolveMigrationScript(workDir, id)\n    const resolvedScripts = candidates.filter(isLoadableMigrationScript)\n\n    if (resolvedScripts.length > 1) {\n      // todo: consider prompt user about which one to run? note: it's likely a mistake if multiple files resolve to the same name\n      throw new Error(\n        `Found multiple migrations for \"${id}\" in ${chalk.cyan(migrationsDirectoryPath)}: \\n - ${candidates\n          .map((candidate) => path.relative(migrationsDirectoryPath, candidate.absolutePath))\n          .join('\\n - ')}`,\n      )\n    }\n\n    const script = resolvedScripts[0]\n    if (!script) {\n      throw new Error(\n        `No migration found for \"${id}\" in ${chalk.cyan(chalk.cyan(migrationsDirectoryPath))}. Make sure that the migration file exists and exports a valid migration as its default export.\\n\n Tried the following files:\\n - ${candidates\n   .map((candidate) => path.relative(migrationsDirectoryPath, candidate.absolutePath))\n   .join('\\n - ')}`,\n      )\n    }\n\n    const mod = script.mod\n    if ('up' in mod || 'down' in mod) {\n      // todo: consider adding support for up/down as separate named exports\n      // For now, make sure we reserve the names for future use\n      throw new Error(\n        'Only \"up\" migrations are supported at this time, please use a default export',\n      )\n    }\n\n    const migration: Migration = mod.default\n\n    if (fromExport && !dry) {\n      throw new Error('Can only dry run migrations from a dataset export file')\n    }\n\n    const concurrency = flags.concurrency\n    if (concurrency !== undefined) {\n      if (concurrency > MAX_MUTATION_CONCURRENCY) {\n        throw new Error(\n          `Concurrency exceeds the maximum allowed value of ${MAX_MUTATION_CONCURRENCY}`,\n        )\n      }\n\n      if (concurrency === 0) {\n        throw new Error(`Concurrency must be a positive number, got ${concurrency}`)\n      }\n    }\n\n    const projectConfig = apiClient({\n      requireUser: true,\n      requireProject: false,\n    }).config()\n\n    if (!project && !projectConfig.projectId) {\n      throw new Error(\n        'sanity.cli.js does not contain a project identifier (\"api.projectId\") and no --project option was provided.',\n      )\n    }\n\n    const apiConfig = {\n      dataset: dataset ?? projectConfig.dataset!,\n      projectId: project ?? projectConfig.projectId!,\n      apiHost: projectConfig.apiHost!,\n      token: projectConfig.token!,\n      apiVersion: ensureApiVersionFormat(apiVersion ?? DEFAULT_API_VERSION),\n    } as const\n    if (dry) {\n      dryRunHandler()\n      return\n    }\n\n    output.print(\n      `\\n${chalk.yellow(chalk.bold('Note: During migrations, your webhooks stay active.'))}`,\n    )\n    output.print(\n      `To adjust them, launch the management interface with ${chalk.cyan('sanity manage')}, navigate to the API settings, and toggle the webhooks before and after the migration as needed.\\n`,\n    )\n\n    if (flags.confirm) {\n      const response = await prompt.single<boolean>({\n        message: `This migration will run on the ${chalk.yellow(\n          chalk.bold(apiConfig.dataset),\n        )} dataset in ${chalk.yellow(chalk.bold(apiConfig.projectId))} project. Are you sure?`,\n        type: 'confirm',\n      })\n\n      if (!response) {\n        debug('User aborted migration')\n        return\n      }\n    }\n\n    const spinner = output.spinner(`Running migration \"${id}\"`).start()\n    await run({api: apiConfig, concurrency, onProgress: createProgress(spinner)}, migration)\n    spinner.stop()\n\n    function createProgress(progressSpinner: ReturnType<typeof output.spinner>) {\n      return function onProgress(progress: MigrationProgress) {\n        if (!flags.progress) {\n          progressSpinner.stop()\n          return\n        }\n        if (progress.done) {\n          progressSpinner.text = `Migration \"${id}\" completed.\n\n  Project id:  ${chalk.bold(apiConfig.projectId)}\n  Dataset:     ${chalk.bold(apiConfig.dataset)}\n\n  ${progress.documents} documents processed.\n  ${progress.mutations} mutations generated.\n  ${chalk.green(progress.completedTransactions.length)} transactions committed.`\n          progressSpinner.stopAndPersist({symbol: chalk.green('✔')})\n          return\n        }\n\n        ;[null, ...progress.currentTransactions].forEach((transaction) => {\n          progressSpinner.text = `Running migration \"${id}\" ${dry ? 'in dry mode...' : '...'}\n\n  Project id:     ${chalk.bold(apiConfig.projectId)}\n  Dataset:        ${chalk.bold(apiConfig.dataset)}\n  Document type:  ${chalk.bold(migration.documentTypes?.join(','))}\n\n  ${progress.documents} documents processed…\n  ${progress.mutations} mutations generated…\n  ${chalk.blue(progress.pending)} requests pending…\n  ${chalk.green(progress.completedTransactions.length)} transactions committed.\n\n  ${\n    transaction && !progress.done\n      ? `» ${prettyFormat({chalk, subject: transaction, migration, indentSize: 2})}`\n      : ''\n  }`\n        })\n      }\n    }\n\n    async function dryRunHandler() {\n      output.print(`Running migration \"${id}\" in dry mode`)\n\n      if (fromExport) {\n        output.print(`Using export ${chalk.cyan(fromExport)}`)\n      }\n\n      output.print()\n      output.print(`Project id:  ${chalk.bold(apiConfig.projectId)}`)\n      output.print(`Dataset:     ${chalk.bold(apiConfig.dataset)}`)\n\n      for await (const mutation of dryRun({api: apiConfig, exportPath: fromExport}, migration)) {\n        if (!mutation) continue\n        output.print()\n        output.print(\n          prettyFormat({\n            chalk,\n            subject: mutation,\n            migration,\n          }),\n        )\n      }\n    }\n  },\n}\n\nexport default runMigrationCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity preview --host=0.0.0.0\n  sanity preview --port=1942\n  sanity preview some/build-output-dir\n`\n\nconst previewCommand: CliCommandDefinition = {\n  name: 'preview',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Starts a server to preview a production build of Sanity Studio',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const previewAction = await getPreviewAction()\n\n    return previewAction(args, context)\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default previewCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst description = 'Extracts a JSON representation of a Sanity schema within a Studio context.'\n\nconst helpText = `\n**Note**: This command is experimental and subject to change.\n\nOptions\n  --workspace <name> The name of the workspace to generate a schema for\n  --path Optional path to specify destination of the schema file\n  --enforce-required-fields Makes the schema generated treat fields marked as required as non-optional. Defaults to false.\n  --format=[groq-type-nodes] Format the schema as GROQ type nodes. Only available format at the moment.\n\nExamples\n  # Extracts schema types in a Sanity project with more than one workspace\n  sanity schema extract --workspace default\n`\n\nconst extractSchemaCommand: CliCommandDefinition = {\n  name: 'extract',\n  group: 'schema',\n  signature: '',\n  description,\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/schema/extractAction')\n\n    return mod.default(args, context)\n  },\n} satisfies CliCommandDefinition\n\nexport default extractSchemaCommand\n","export default {\n  name: 'schema',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interacts with Sanity Studio schema configurations',\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst description = 'Validates all schema types specified in a workspace.'\n\nconst helpText = `\nOptions\n  --workspace <name> The name of the workspace to use when validating all schema types.\n  --format <pretty|ndjson|json> The output format used to print schema errors and warnings.\n  --level <error|warning> The minimum level reported out. Defaults to warning.\n\nExamples\n  # Validates all schema types in a Sanity project with more than one workspace\n  sanity schema validate --workspace default\n\n  # Save the results of the report into a file\n  sanity schema validate > report.txt\n\n  # Report out only errors\n  sanity schema validate --level error\n`\n\nconst validateDocumentsCommand: CliCommandDefinition = {\n  name: 'validate',\n  group: 'schema',\n  signature: '',\n  description,\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/schema/validateAction')\n\n    return mod.default(args, context)\n  },\n} satisfies CliCommandDefinition\n\nexport default validateDocumentsCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\nimport {isInteractive} from '../../util/isInteractive'\nimport {getDevAction} from '../dev/devCommand'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new CORS-entry to be added.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity start --host=0.0.0.0\n  sanity start --port=1942\n  sanity start some/build-output-dir\n`\n\nconst startCommand: CliCommandDefinition = {\n  name: 'start',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Alias for `sanity preview`',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const {output, chalk, prompt} = context\n    const previewAction = await getPreviewAction()\n\n    const warn = (msg: string) => output.warn(chalk.yellow.bgBlack(msg))\n    const error = (msg: string) => output.warn(chalk.red.bgBlack(msg))\n    warn('╭───────────────────────────────────────────────────────────╮')\n    warn('│                                                           │')\n    warn(\"│  You're running Sanity Studio v3. In this version the     │\")\n    warn('│  [start] command is used to preview static builds.        |')\n    warn('│                                                           │')\n    warn('│  To run a development server, use the [npm run dev] or    |')\n    warn('│  [npx sanity dev] command instead. For more information,  │')\n    warn('│  see https://www.sanity.io/help/studio-v2-vs-v3           │')\n    warn('│                                                           │')\n    warn('╰───────────────────────────────────────────────────────────╯')\n    warn('') // Newline to separate from other output\n\n    try {\n      await previewAction(args, context)\n    } catch (err) {\n      if (err.name !== 'BUILD_NOT_FOUND') {\n        throw err\n      }\n\n      error(err.message)\n      error('\\n')\n\n      const shouldRunDevServer =\n        isInteractive &&\n        (await prompt.single({\n          message: 'Do you want to start a development server instead?',\n          type: 'confirm',\n        }))\n\n      if (shouldRunDevServer) {\n        const devAction = await getDevAction()\n        await devAction(args, context)\n      } else {\n        // Indicate that this isn't an expected exit\n        // eslint-disable-next-line no-process-exit\n        process.exit(1)\n      }\n    }\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default startCommand\n","export function prettifyQuotaError(message: string) {\n  return (err: Error & {statusCode?: number}): Error & {statusCode?: number} => {\n    if (err.statusCode === 402) {\n      err.message = message\n      throw err\n    }\n\n    throw err\n  }\n}\n","import {type CliCommandDefinition, type CliPrompter} from '@sanity/cli'\n\nimport {prettifyQuotaError} from '../../util/prettifyQuotaError'\nimport {type Role} from './types'\n\nconst helpText = `\nOptions\n  --role Role to invite the user as\n\nExamples\n  # Invite a new user to the project (prompt for details)\n  sanity users invite\n\n  # Send a new user invite to the email \"pippi@sanity.io\", prompt for role\n  sanity users invite pippi@sanity.io\n\n  # Send a new user invite to the email \"pippi@sanity.io\", as administrator\n  sanity users invite pippi@sanity.io --role administrator\n`\n\ninterface InviteFlags {\n  role?: string\n}\n\nconst inviteUserCommand: CliCommandDefinition<InviteFlags> = {\n  name: 'invite',\n  group: 'users',\n  signature: '[EMAIL]',\n  helpText,\n  description: 'Invite a new user to the project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const [selectedEmail] = args.argsWithoutOptions\n    const flags = args.extOptions\n\n    const client = apiClient().clone().config({useProjectHostname: false, apiVersion: '2021-06-07'})\n    const {projectId} = client.config()\n    const roles = (await client.request<Role[]>({uri: `/projects/${projectId}/roles`})).filter(\n      (role) => role.appliesToUsers,\n    )\n    const email = selectedEmail || (await promptForEmail(prompt))\n    const selectedRole = flags.role || (await promptForRole(prompt, roles))\n    const role = roles.find(({name}) => name.toLowerCase() === selectedRole.toLowerCase())\n    if (!role) {\n      throw new Error(`Role name \"${selectedRole}\" not found`)\n    }\n\n    await client\n      .clone()\n      .request({\n        method: 'POST',\n        uri: `/invitations/project/${projectId}`,\n        body: {email, role: role.name},\n        useGlobalApi: true,\n        maxRedirects: 0,\n      })\n      .catch(\n        prettifyQuotaError(\n          'Project is already at user quota, add billing details to the project in order to allow overage charges.',\n        ),\n      )\n\n    output.print(`Invitation sent to ${email}`)\n  },\n}\n\nexport default inviteUserCommand\n\nfunction promptForEmail(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Email to invite:',\n    filter: (val) => val.trim(),\n    validate: (name) => {\n      if (!name || !name.includes('@')) {\n        return 'Invalid email'\n      }\n\n      return true\n    },\n  })\n}\n\nfunction promptForRole(prompt: CliPrompter, roles: Role[]): Promise<string> {\n  return prompt.single({\n    type: 'list',\n    message: 'Which role should the user have?',\n    choices: roles.map((role) => ({\n      value: role.name,\n      name: `${role.title} (${role.description})`,\n    })),\n  })\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {size, sortBy} from 'lodash'\n\nimport {type Invite, type PartialProjectResponse, type User} from './types'\n\nconst sortFields = ['id', 'name', 'role', 'date']\n\nconst helpText = `\nOptions\n  --no-invitations Don't include pending invitations\n  --no-robots Don't include robots (token users)\n  --sort <field> Sort users by specified column: ${sortFields.join(', ')}\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List all users of the project\n  sanity users list\n\n  # List all users of the project, but exclude pending invitations and robots\n  sanity users list --no-invitations --no-robots\n\n  # List all users, sorted by role\n  sanity users list --sort role\n`\n\nconst listUsersCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'users',\n  signature: '',\n  helpText,\n  description: 'List all users of the project',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {sort, order, robots, invitations} = {\n      sort: 'date',\n      order: 'asc',\n      robots: true,\n      invitations: true,\n      ...args.extOptions,\n    }\n\n    if (!sortFields.includes(sort)) {\n      throw new Error(`Can't sort by field \"${sort}\". Must be one of ${sortFields.join(', ')}`)\n    }\n\n    if (order !== 'asc' && order !== 'desc') {\n      throw new Error(`Unknown sort order \"${order}\", must be either \"asc\" or \"desc\"`)\n    }\n\n    const client = apiClient()\n    const globalClient = client.clone().config({useProjectHostname: false})\n    const {projectId} = client.config()\n\n    const useGlobalApi = true\n    const [pendingInvitations, project] = await Promise.all([\n      invitations\n        ? globalClient\n            .request<Invite[]>({uri: `/invitations/project/${projectId}`, useGlobalApi})\n            .then(getPendingInvitations)\n        : [],\n      globalClient.request<PartialProjectResponse>({uri: `/projects/${projectId}`, useGlobalApi}),\n    ])\n\n    const memberIds = project.members.map((member) => member.id)\n    const users = await globalClient\n      .request<User | User[]>({uri: `/users/${memberIds.join(',')}`, useGlobalApi})\n      .then((user) => (Array.isArray(user) ? user : [user]))\n\n    const projectMembers = project.members\n      .map((member) => ({\n        ...member,\n        ...getUserProps(users.find((candidate) => candidate.id === member.id)),\n      }))\n      .filter((member) => !member.isRobot || robots)\n\n    const members = [...projectMembers, ...pendingInvitations]\n\n    const ordered = sortBy(\n      members.map(({id, name, role, date}) => [id, name, role, date]),\n      [sortFields.indexOf(sort)],\n    )\n\n    const rows = order === 'asc' ? ordered : ordered.reverse()\n\n    const maxWidths = rows.reduce(\n      (max, row) => row.map((current, index) => Math.max(size(current), max[index])),\n      sortFields.map((str) => size(str)),\n    )\n\n    const printRow = (row: string[]) => {\n      const isInvite = row[0] === '<pending>'\n      const textRow = row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ')\n      return isInvite ? chalk.dim(textRow) : textRow\n    }\n\n    output.print(chalk.cyan(printRow(sortFields)))\n    rows.forEach((row) => output.print(printRow(row)))\n  },\n}\n\nfunction getUserProps(user: User | undefined) {\n  const {displayName: name, createdAt: date} = user || {}\n  return {name: name || '', date: date || ''}\n}\n\nfunction getPendingInvitations(invitations: Invite[]) {\n  return invitations\n    .filter((invite) => !invite.isAccepted && !invite.isRevoked && !invite.acceptedByUserId)\n    .map((invite) => ({\n      id: '<pending>',\n      name: invite.email,\n      role: invite.role,\n      date: invite.createdAt,\n    }))\n}\n\nexport default listUsersCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nexport const usersGroup: CliCommandGroupDefinition = {\n  name: 'users',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages users of your Sanity project',\n}\n\nexport default usersGroup\n","import {type CliCommandDefinition, type CliCommandGroupDefinition} from '@sanity/cli'\n\nimport appGroup from './app/appGroup'\nimport appBuildCommand from './app/buildCommand'\nimport appDeployCommand from './app/deployCommand'\nimport appDevCommand from './app/devCommand'\nimport appStartCommand from './app/startCommand'\nimport appUndeployCommand from './app/undeployCommand'\nimport backupGroup from './backup/backupGroup'\nimport disableBackupCommand from './backup/disableBackupCommand'\nimport downloadBackupCommand from './backup/downloadBackupCommand'\nimport enableBackupCommand from './backup/enableBackupCommand'\nimport listBackupCommand from './backup/listBackupCommand'\nimport buildCommand from './build/buildCommand'\nimport addCorsOriginCommand from './cors/addCorsOriginCommand'\nimport corsGroup from './cors/corsGroup'\nimport deleteCorsOriginCommand from './cors/deleteCorsOriginCommand'\nimport listCorsOriginsCommand from './cors/listCorsOriginsCommand'\nimport aliasDatasetCommand from './dataset/alias/aliasCommands'\nimport copyDatasetCommand from './dataset/copyDatasetCommand'\nimport createDatasetCommand from './dataset/createDatasetCommand'\nimport datasetGroup from './dataset/datasetGroup'\nimport datasetVisibilityCommand from './dataset/datasetVisibilityCommand'\nimport deleteDatasetCommand from './dataset/deleteDatasetCommand'\nimport exportDatasetCommand from './dataset/exportDatasetCommand'\nimport importDatasetCommand from './dataset/importDatasetCommand'\nimport listDatasetsCommand from './dataset/listDatasetsCommand'\nimport deployCommand from './deploy/deployCommand'\nimport undeployCommand from './deploy/undeployCommand'\nimport devCommand from './dev/devCommand'\nimport createDocumentsCommand from './documents/createDocumentsCommand'\nimport deleteDocumentsCommand from './documents/deleteDocumentsCommand'\nimport documentsGroup from './documents/documentsGroup'\nimport getDocumentsCommand from './documents/getDocumentsCommand'\nimport queryDocumentsCommand from './documents/queryDocumentsCommand'\nimport validateDocumentsCommand from './documents/validateDocumentsCommand'\nimport execCommand from './exec/execCommand'\nimport deleteGraphQLAPICommand from './graphql/deleteGraphQLAPICommand'\nimport deployGraphQLAPICommand from './graphql/deployGraphQLAPICommand'\nimport graphqlGroup from './graphql/graphqlGroup'\nimport listGraphQLAPIsCommand from './graphql/listGraphQLAPIsCommand'\nimport createHookCommand from './hook/createHookCommand'\nimport deleteHookCommand from './hook/deleteHookCommand'\nimport hookGroup from './hook/hookGroup'\nimport listHookLogsCommand from './hook/listHookLogsCommand'\nimport listHooksCommand from './hook/listHooksCommand'\nimport printHookAttemptCommand from './hook/printHookAttemptCommand'\nimport extractManifestCommand from './manifest/extractManifestCommand'\nimport manifestGroup from './manifest/manifestGroup'\nimport createMigrationCommand from './migration/createMigrationCommand'\nimport listMigrationsCommand from './migration/listMigrationsCommand'\nimport migrationGroup from './migration/migrationGroup'\nimport runMigrationCommand from './migration/runMigrationCommand'\nimport previewCommand from './preview/previewCommand'\nimport extractSchemaCommand from './schema/extractSchemaCommand'\nimport schemaGroup from './schema/schemaGroup'\nimport validateSchemaCommand from './schema/validateSchemaCommand'\nimport startCommand from './start/startCommand'\nimport inviteUserCommand from './users/inviteUserCommand'\nimport listUsersCommand from './users/listUsersCommand'\nimport usersGroup from './users/usersGroup'\n\nconst commands: (CliCommandDefinition | CliCommandGroupDefinition)[] = [\n  appGroup,\n  appDeployCommand,\n  appDevCommand,\n  appBuildCommand,\n  appStartCommand,\n  appUndeployCommand,\n  buildCommand,\n  datasetGroup,\n  deployCommand,\n  undeployCommand,\n  listDatasetsCommand,\n  createDatasetCommand,\n  datasetVisibilityCommand,\n  exportDatasetCommand,\n  importDatasetCommand,\n  deleteDatasetCommand,\n  copyDatasetCommand,\n  aliasDatasetCommand,\n  backupGroup,\n  listBackupCommand,\n  downloadBackupCommand,\n  disableBackupCommand,\n  enableBackupCommand,\n  corsGroup,\n  listCorsOriginsCommand,\n  addCorsOriginCommand,\n  deleteCorsOriginCommand,\n  usersGroup,\n  inviteUserCommand,\n  listUsersCommand,\n  hookGroup,\n  listHooksCommand,\n  createHookCommand,\n  migrationGroup,\n  createMigrationCommand,\n  runMigrationCommand,\n  listMigrationsCommand,\n  deleteHookCommand,\n  listHookLogsCommand,\n  printHookAttemptCommand,\n  documentsGroup,\n  getDocumentsCommand,\n  queryDocumentsCommand,\n  deleteDocumentsCommand,\n  createDocumentsCommand,\n  validateDocumentsCommand,\n  graphqlGroup,\n  listGraphQLAPIsCommand,\n  deployGraphQLAPICommand,\n  deleteGraphQLAPICommand,\n  devCommand,\n  startCommand,\n  schemaGroup,\n  validateSchemaCommand,\n  extractSchemaCommand,\n  previewCommand,\n  execCommand,\n  manifestGroup,\n  extractManifestCommand,\n]\n\n/**\n * @deprecated Not actually deprecated, but these are internals and should not be relied upon outside of the Sanity team\n * @internal\n */\nexport const cliProjectCommands = {\n  requiredCliVersionRange: '^3.0.0',\n  commands,\n}\n"],"names":["appGroup","name","signature","isGroupRoot","description","helpText","appBuildCommand","group","action","args","context","overrides","getBuildAction","default","appDeployCommand","appDevCommand","getDevAction","isInteractive","process","stdout","isTTY","env","TERM","devCommand","appStartCommand","output","chalk","prompt","previewAction","getPreviewAction","error","msg","warn","red","bgBlack","err","message","single","type","exit","appUndeployCommand","defaultApiVersion","datasetBackupGroup","parseApiErr","apiErr","code","statusCode","statusMessage","response","body","data","JSON","stringify","debug","debugIt","validateDatasetName","datasetName","toLowerCase","length","MAX_DATASET_NAME_LENGTH","test","promptForDatasetName","options","validate","chooseDatasetPrompt","apiClient","allowCreation","client","datasets","list","hasProduction","find","dataset","datasetChoices","map","value","selected","choices","Separator","newDatasetName","undefined","create","resolveApiClient","apiVersion","projectId","token","config","Error","selectedDataset","withConfig","disableDatasetBackupCommand","argsWithoutOptions","request","method","headers","Authorization","uri","enabled","print","green","require","archiver","archiveDir","tmpOutDir","outFilePath","progressCb","Promise","resolve","reject","archiveDestination","createWriteStream","on","archive","gzip","gzipOptions","level","zlib","constants","Z_DEFAULT_COMPRESSION","stack","progress","fs","processedBytes","pipe","directory","finalize","maxBackupIdsShown","chooseBackupIdPrompt","query","limit","toString","backups","backupIdChoices","backup","id","cleanupTmpDir","tmpDir","rimraf","MAX_RETRIES","BACKOFF_DELAY_BASE","exponentialBackoff","retryCount","Math","pow","withRetry","operation","maxRetries","retryDelay","setTimeout","CONNECTION_TIMEOUT","READ_TIMEOUT","getIt","keepAlive","promise","downloadAsset","url","fileName","fileType","outDir","normalizedFileName","path","basename","assetFilePath","getAssetFilePath","maxRedirects","timeout","connect","socket","stream","pipeline","join","downloadDocument","PaginatedGetBackupStream","Readable","cursor","totalFiles","constructor","backupId","objectMode","_read","fetchNextBackupPage","files","forEach","file","push","nextCursor","destroy","String","newProgress","startStep","spinner","start","lastProgress","step","Date","now","elapsed","prettyMs","current","total","text","set","succeed","update","fail","humanFileSize","size","i","floor","log","toFixed","isPathDirName","filepath","createDebug","DEFAULT_DOWNLOAD_CONCURRENCY","MAX_DOWNLOAD_CONCURRENCY","parseCliFlags","yargs","hideBin","argv","slice","downloadBackupCommand","opts","prepareBackupOptions","outFileName","bold","cyan","padEnd","progressSpinner","mkdtemp","tmpdir","dir","mkdirSync","recursive","tmpOutDocumentsFile","docOutStream","docWriteMutex","Mutex","backupFileStream","totalItemsDownloaded","pMap","doc","runExclusive","write","concurrency","end","finished","flags","workDir","isString","defaultOutFileName","out","absolutify","filter","overwrite","existsSync","dirname","enableDatasetBackupCommand","DEFAULT_LIST_BACKUP_LIMIT","alias","listDatasetBackupCommand","Number","MAX_SAFE_INTEGER","before","after","parsedBefore","processDateFlags","parsedAfter","isAfter","table","Table","columns","title","alignment","createdAt","addRow","resource","lightFormat","parse","printTable","date","parsedDate","isValid","buildCommand","wildcardReplacement","portReplacement","addCorsOrigin","givenOrigin","origin","filterAndValidateOrigin","promptForOrigin","hasWildcard","includes","promptForWildcardConfirmation","allowCredentials","credentials","promptForCredentials","Boolean","requireUser","requireProject","oneline","yellow","logSymbols","warning","underline","replace","filterOrigin","validateOrigin","example","parsed","host","protocol","RegExp","result","addCorsOriginCommand","extOptions","cwd","corsGroup","deleteCorsOriginCommand","originId","specified","specifiedOrigin","origins","listCorsOriginsCommand","validateDatasetAliasName","promptForDatasetAliasName","ALIAS_PREFIX","listAliases","createAlias","aliasName","modify","updateAlias","unlinkAlias","removeAlias","createAliasHandler","targetDataset","nameError","aliases","projectFeatures","all","then","sets","ds","aliasClient","aliasOutputName","startsWith","datasetErr","option","deleteAliasHandler","force","dsError","fetchedAliases","linkedAlias","elem","input","trim","linkAliasHandler","da","unlinkAliasHandler","aliasCommand","verb","listDatasetCopyJobs","offset","job","state","updatedAt","sourceDataset","withHistory","timeStarted","formatDistanceToNow","parseISO","timeTaken","formatDistance","color","getClientUrl","useCdn","cdnUrl","Observable","observer","progressSource","EventSource","stopped","onError","close","next","onChannelError","onMessage","event","onComplete","removeEventListener","complete","addEventListener","followProgress","jobId","currentProgress","listenUrl","subscribe","copyDatasetCommand","attach","shouldSkipHistory","existingDatasets","sourceDatasetName","targetDatasetName","skipHistory","detach","allowedModes","createDatasetCommand","visibility","canCreatePrivate","aclMode","promptForDatasetVisibility","mode","datasetVisibilityCommand","edit","curr","deleteDatasetCommand","delete","noop","parseFlags","rawFlags","types","split","assetConcurrency","parseInt","raw","assets","drafts","compress","exportDatasetCommand","targetDestination","destinationPath","outputPath","getOutputPath","currentStep","onProgress","exportDataset","destination","dstPath","isAbsolute","dstStats","stat","catch","looksLikeFile","isFile","indexOf","createPath","mkdir","finalPath","str","toBoolIfSet","flag","allowAssetsInDifferentDataset","allowFailingAssets","replaceAssets","skipCrossDatasetReferences","allowSystemDocuments","missing","importDatasetCommand","fromInitCommand","getMutationOperation","target","determineTargetDataset","isUrl","inputStream","assetsBase","sourceIsFolder","getUrlStream","sourceFile","fileStats","isDirectory","createReadStream","importClient","clone","stepStart","spinInterval","percent","lengthComputable","sameStep","getPercentage","clearInterval","prevStep","prevStepStart","timeSpent","secondsDecimalDigits","setInterval","endTask","success","numDocs","warnings","sanityImport","printWarnings","details","responseBody","padStart","onlyBody","assetFails","bind","listAliasesHandler","listDatasetsCommand","deployCommand","undeployCommand","createDocumentsCommand","watch","useJson5","json5","contentPath","content","readFile","writeDocuments","getResultMessage","docId","uuid","ext","tmpFile","os","defaultValue","getDocument","_id","_type","writeFile","editor","getEditor","registerUnlinkOnSigInt","chokidar","readAndPerformCreatesFromFile","execa","bin","concat","stdio","sync","unlink","filePath","isEqual","writeResult","documents","docs","Array","isArray","mutations","index","validateDocument","isIdentifiedSanityDocument","createIfNotExists","createOrReplace","transaction","commit","arr","isSingle","isPlainObject","getErrorMessage","isSanityDocumentish","joiner","results","res","created","skipped","defaultEditor","platform","VISUAL","EDITOR","shift","deleteDocumentsCommand","ids","reduce","trx","deleted","notFound","pluralize","documentsGroup","identity","inp","colorizeJson","formatters","punctuator","white","key","string","number","literal","whitespace","json","tokenize","prevToken","getDocumentsCommand","pretty","project","anonymous","cliConfig","requireDataset","api","baseClient","originalDataset","originalProjectId","fetch","fallbackApiVersion","SANITY_CLI_QUERY_API_VERSION","validateDocumentsCommand","execCommand","deleteGraphQLAPICommand","deployGraphQLAPICommand","graphqlGroup","listGraphQLAPIsCommand","createHookCommand","manageUrl","projects","getById","organizationId","open","deleteHookCommand","hookId","promptForHook","specifiedName","hooks","hook","hookGroup","printHookAttemptCommand","attemptId","attempt","resultCode","resultBody","failureReason","inProgress","getStatus","isFailure","formatFailure","includeHelp","help","listHookLogsCommand","messages","attempts","groupedAttempts","groupBy","populated","totalMessages","printMessage","detailed","printSeparator","skip","status","failureCount","inspect","payload","colors","prefix","failure","duration","listHooksCommand","httpMethod","extractManifestCommand","extractManifestSafe","extractError","MIGRATIONS_DIRECTORY","MIGRATION_SCRIPT_EXTENSIONS","DEFAULT_API_VERSION","minimalAdvanced","migrationName","documentTypes","t","minimalSimple","renameField","renameType","stringToPTE","TEMPLATES","template","createMigrationCommand","suffix","templatesByName","Object","fromEntries","definedTemplate","sluggedName","deburr","destDir","renderedTemplate","definitionFile","resolveMigrationScript","flatMap","location","relativePath","absolutePath","mod","isLoadableMigrationScript","script","migrate","listMigrationCommand","_","migrations","resolveMigrations","definedMigration","migration","unregister","register","version","supported","migrationsDir","migrationEntries","readdir","withFileTypes","entry","entryName","removeMigrationScriptExtension","candidates","candidate","endsWith","pathToString","segment","isIndexSegment","isKeySegment","_key","isIndexTuple","from","to","maxKeyLength","children","depth","entries","child","max","formatTree","node","paddingLength","indent","getNodes","getLeaves","nodes","getMessage","isLast","nextIndent","leaves","nested","first","rest","firstPadding","repeat","elbow","subsequentPadding","firstMessage","subsequentMessages","marker","convertToTree","root","addNode","tree","isTty","isatty","prettyFormat","subject","indentSize","subjectEntry","badge","prettyFormatMutation","encodeItemRef","ref","badgeStyle","variant","info","bgWhite","black","incremental","bgGreen","maybeDestructive","bgYellow","destructive","bgRed","label","mutationImpact","patch","documentId","mutation","document","listFormatter","Intl","ListFormat","mutationHeader","mutationType","documentType","format","lock","ifRevision","header","padding","patches","flat","formatPatchMutation","op","formattedType","amount","position","referenceItem","items","startIndex","endIndex","line","VERSION_PATTERN","ensureApiVersionFormat","normalizedVersion","MAX_MUTATION_CONCURRENCY","DEFAULT_MUTATION_CONCURRENCY","runMigrationCommand","migrationsDirectoryPath","fromExport","dry","dryRun","resolvedScripts","relative","projectConfig","apiConfig","apiHost","confirm","run","createProgress","stop","done","completedTransactions","stopAndPersist","symbol","currentTransactions","blue","pending","dryRunHandler","exportPath","previewCommand","extractSchemaCommand","startCommand","prettifyQuotaError","inviteUserCommand","selectedEmail","useProjectHostname","roles","role","appliesToUsers","email","promptForEmail","selectedRole","promptForRole","useGlobalApi","val","sortFields","listUsersCommand","sort","order","robots","invitations","globalClient","pendingInvitations","getPendingInvitations","memberIds","members","member","users","user","getUserProps","isRobot","ordered","sortBy","rows","reverse","maxWidths","row","printRow","isInvite","textRow","col","dim","displayName","invite","isAccepted","isRevoked","acceptedByUserId","usersGroup","commands","datasetGroup","aliasDatasetCommand","backupGroup","listBackupCommand","disableBackupCommand","enableBackupCommand","migrationGroup","listMigrationsCommand","queryDocumentsCommand","schemaGroup","validateSchemaCommand","manifestGroup","cliProjectCommands","requiredCliVersionRange"],"mappings":"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;AAAAA,IACbF,MAAMoC,OAAOpC;AAAAA,IACbriB,MAAMykB,OAAO/kB;AAAAA,EAAAA,EACb;AACN;AChHO,MAAMmlB,aAAwC;AAAA,EACnDp2B,MAAM;AAAA,EACNC,WAAW;AAAA,EACXC,aAAa;AAAA,EACbC,aAAa;AACf,GCuDMk2B,WAAiE,CACrEt2B,UACAc,kBACAC,eACAT,iBACAkB,iBACAgB,oBACAmP,cACA4kB,cACApX,eACAC,iBACAF,qBACA5F,sBACAM,0BACAgB,sBACA6B,sBACA1C,sBACAlB,oBACA2d,cACAC,oBACAC,0BACA7oB,uBACA8oB,6BACAC,4BACA/iB,WACAM,wBACAT,sBACAI,yBACAuiB,YACA5C,mBACAa,kBACAhO,WACAgC,kBACA5C,mBACAmR,gBACArN,wBACAsI,qBACAgF,sBACA9Q,mBACAmB,qBACAZ,yBACA/C,gBACAe,qBACAwS,uBACA9T,wBACA5D,wBACA+F,4BACAI,cACAC,wBACAF,yBACAD,yBACA/jB,YACAgyB,cACAyD,aACAC,0BACA3D,sBACAD,gBACAhO,aACA6R,eACA1O,sBAAsB,GAOX2O,qBAAqB;AAAA,EAChCC,yBAAyB;AAAA,EACzBd;AACF;;;;;;;"}